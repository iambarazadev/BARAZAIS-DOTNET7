@page "/Suppliers/New"
@page "/Suppliers/Edit/{Sn:int}"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation
@inject IHttpContextAccessor Accessor
@inject UserManager<UserModel> UserManager

<Header Title=@Title
        LineText=@LineText
        ViewUrl=@ViewUrl
        ViewUrlIcon=@ViewUrlIcon />

<EditForm Model="ThisSupplier" OnValidSubmit="ProcessAndSave" autocomplete="off">
    <div class="row text-unique mb-3 p-3 bg-white">
        <div class="col-lg-3 col-md-2 col-12">
            @{
                if (ThisSupplier.Id > 0)
                {
                    <div class="container pb-3">
                        <p class="mt-3 p-3 border border-2">
                            <i class="bi bi-upc-scan " style="font-size:0.75rem !important;"></i>  @(ThisSupplier.Id > 0 ? ThisSupplier.Id : "--:--")
                        </p>
                    </div>
                }
            }
        </div>
        <div class="col-lg-6 col-md-8 col-12 ps-md-0 pb-3 text-start">
            <div class="container pt-2 pb-3">
                <div class="form-floating my-2 rounded-0">
                    <input type="text" required @bind="ThisSupplier.Caption" class="form-control bg-xss border-0 text-unique fw-bolder rounded-0 text-capitalize " id="floatingInput" placeholder="Supplier Name " />
                    <label for="floatingInput">
                        Supplier Name
                    </label>
                    <ValidationMessage For=" () => ThisSupplier.Caption " />
                </div>
                <div class="form-floating my-2 rounded-0">
                    <input type="text" required @bind="ThisSupplier.TIN" class="form-control bg-xss border-0 text-unique fw-bolder rounded-0 text-capitalize " id="floatingInput" placeholder="Supplier TIN" />
                    <label for="floatingInput">
                        Supplier TIN
                    </label>
                    <ValidationMessage For=" () => ThisSupplier.TIN " />
                </div>
                <div class="form-floating my-2 rounded-0">
                    <input type="text" required @bind="ThisSupplier.Phone" class="form-control bg-xss border-0 text-unique fw-bolder rounded-0 text-capitalize " id="floatingInput" placeholder="Supplier Phone" />
                    <label for="floatingInput">
                        Supplier Phone
                    </label>
                    <ValidationMessage For=" () => ThisSupplier.Phone " />
                </div>
                <div class="form-floating my-2 rounded-0">
                    <input type="text" required @bind="ThisSupplier.Email" class="form-control bg-xss border-0 text-unique fw-bolder rounded-0 text-capitalize " id="floatingInput" placeholder="Supplier Email" />
                    <label for="floatingInput">
                        Supplier Email
                    </label>
                    <ValidationMessage For=" () => ThisSupplier.Email " />
                </div>
                <div class="row p-0 m-0">
                    <div class="col-12 text-start pb-2 px-0">
                        <div class="form-floating rounded-0">
                            <textarea @bind="ThisSupplier.Address" class="form-control rounded-0 border-0 w-100 fw-bolder text-unique text-capitalize bg-xss h-50" rows="3" placeholder="Address" required></textarea>
                            <label for="floatingInput">
                                Address
                            </label>
                            @*<ValidationMessage For=" () => Fx.Description " />*@
                        </div>
                        <ValidationMessage For=" () => ThisSupplier.Address " />
                    </div>
                </div>
                <div class="row p-0 m-0">
                    <div class="col-12 text-start pb-2 px-0">
                        <div class="form-floating rounded-0">
                            <textarea @bind="ThisSupplier.Description" class="form-control rounded-0 border-0 w-100 fw-bolder text-unique text-capitalize bg-xss h-50" rows="3" placeholder="Add Description" required></textarea>
                            <label for="floatingInput">
                                Description [Note]
                            </label>
                            @*<ValidationMessage For=" () => Fx.Description " />*@
                        </div>
                        <ValidationMessage For=" () => ThisSupplier.Description " />
                    </div>
                </div>
                <div class="row p-0 m-0">
                    <div class="col-12 text-start pb-2 px-0 d-flex flex-row justify-content-between">
                        <button class="btn btn-md btn-outline-light text-muted border-0 rounded-0" @onclick=@(()=> CancelEntry())>Cancel</button>
                        <button class="btn btn-md btn-primary border-0 rounded-0">Save</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3 col-md-2 col-12">
            @*Empty Div for centering*@
        </div>
    </div>
</EditForm>


@code {
    //Url Parameter Variables
    [Parameter]
    public int Sn { get; set; } = 0;

    //Header Component
    private string Title = "Suppliers";
    private string LineText = "Add New";
    private string ViewUrl = "Suppliers/ListView";
    private string ViewUrlIcon = "bi-view-stacked";

    //Supplier Model Variable
    private SupplierModel ThisSupplier = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Start(Sn);
    }

    private async Task Start(int TheKey)
    {
        if (TheKey < 1)
        {
            ThisSupplier = new();
        }
        else
        {
            using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
            {
                ThisSupplier = await repo.Suppliers.GetDetailedSupplierAsync(TheKey);

                await repo.CompleteAsync();
                repo.Dispose();
            }
            LineText = "Edit Supplier";
        }
    }

    private async Task ProcessAndSave()
    {
        if (ThisSupplier != null)
        {
            using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
            {
                if (ThisSupplier.Id > 0)
                {
                    ThisSupplier.DateUpdated = DateTime.Now;
                    await Task.Run(() => repo.Suppliers.Update(this.ThisSupplier));
                    await repo.CompleteAsync();
                    repo.Dispose();

                    Navigation.NavigateTo("Suppliers/ListView");
                }
                else
                {
                    var Tempuser = await UserManager.FindByNameAsync(Accessor.HttpContext.User.Identity?.Name);
                    ThisSupplier.UserId = Tempuser.Id;
                    ThisSupplier.CompanyId = Tempuser.CompanyId;

                    await repo.Suppliers.AddAsync(ThisSupplier);
                    await repo.CompleteAsync();
                    repo.Dispose();
                }
            }
        }

        ThisSupplier = new();
        StateHasChanged();
    }

    private void CancelEntry()
    {
        Navigation.NavigateTo("Suppliers/ListView");
        //ThisSupplier = new();
    }
}

