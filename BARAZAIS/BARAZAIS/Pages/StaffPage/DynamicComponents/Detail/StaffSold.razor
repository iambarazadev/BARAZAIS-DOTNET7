@inject IDbContextFactory<BarazaContext> MyFactory
@attribute [Authorize]

@{
    if (ViewBill)
    {
        GetFullCostRetail(SendBill);
        <div class="modal fade " style="width:100vw !important;" id="Search" tabindex="-1" aria-labelledby="SearchLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog modal-dialog-scrollable modal-xl rounded-0">
                <div class="modal-content border-0 bg-xss rounded-0">
                    <div class="modal-header border-0 px-1 py-0 pb-1 my-0 mb-3 text-capitalize">
                        <ul class=" m-0 p-0 d-flex flex-row">
                            <li class="p-0" style="font-size:1.14rem !important; width:fit-content;"><p class="bg-xs py-1 px-2 fw-bolder"> @(SendBill.Code + SendBill.Id)</p></li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;">
                                <ul class="bg-light p-2">
                                    <li class="p-0 m-0">Total Sale : @FullRetail.ToString("n0")</li>
                                    <li class="p-0 m-0">Total Cost : @FullCost.ToString("n0")</li>
                                </ul>
                            </li>
                            <li class=" p-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;">
                                <p class="bg-light p-2  m-0"><i class="bi bi-dot txtshadow me-1"></i></p>
                                <p class="bg-light py-0 px-2 m-0"><i class="bi bi-dot txtshadow me-1"></i></p>
                            </li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;">
                                <ul class="bg-light p-2">
                                    <li class="p-0 m-0">Total Returns</li>
                                    <li class="p-0 m-0">@(((FullRetail) - (FullCost)).ToString("n0"))</li>
                                </ul>
                            </li>
                            <li class=" p-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;">
                                <p class="bg-light p-2 m-0"><i class="bi bi-dot txtshadow me-1"></i></p>
                                <p class="bg-light py-0 px-2 m-0"><i class="bi bi-dot txtshadow me-1"></i></p>
                            </li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;">
                                <ul class="bg-light p-2">
                                    <li class="p-0 m-0">@(SendBill.User.FirstName + " " + SendBill.User.LastName)</li>
                                    <li class="p-0 m-0">@((SendBill.DateCreated).ToString("MMM, dd yyyy"))</li>
                                </ul>
                            </li>
                        </ul>
                        <ul class=" m-0 p-0 d-flex flex-row">
                            <li class=" p-0 opacity-75 rounded-circle" style="font-size:1rem !important; width:fit-content; cursor:pointer;"> <p class=" text-white rounded-circle"><i class="bi-printer text-white fw-bolder me-1"></i></p></li>
                        </ul>
                    </div>
                    <div class="modal-body py-0">
                        <div class="row">
                            <div class="col-12 shadow-lg bg-light border border-5 rounded-3">
                                <div class="row text-white  shadow-sm txtshadow bg-xs">
                                    <div class="col-1 text-center py-3 fw-bolder">#</div>
                                    <div class="col-lg-2 col-4 py-3 text-start">Product</div>
                                    <div class="col-lg-1 col-3 py-3 text-center ">Sold</div>
                                    <div class="col-lg-2 col-4 py-3 text-start ">Retail Price</div>
                                    <div class="col-2 d-none d-lg-block py-3 text-md-start text-center ">AtCostOf</div>
                                    <div class="col-2 d-none d-lg-block py-3 text-md-start text-center ">Return</div>
                                    <div class="col-1 d-none d-lg-block py-3 text-center ">Before</div>
                                    <div class="col-1 d-none d-lg-block py-3 text-center">After</div>
                                </div>
                                @{
                                    foreach (var item in (SendBill.ProductBill))
                                    {
                                        <div class="row text-unique bg-xss border-bottom border-1" style="font-size:0.8rem !important">
                                            <div class="col-1 text-center py-1 fw-bolder">
                                                @(SendBill.ProductBill.IndexOf(item) + 1)
                                            </div>
                                            <div class="col-lg-2 col-4 py-1 text-start">
                                                <ul class="d-flex flex-column justify-content-start p-0 m-0 text-capitalize">
                                                    <li class="text-primary d-none d-lg-block">@(item.Product.Caption.Length > 20 ? item.Product.Caption.Substring(0, 16) + " .." : item.Product.Caption)</li>
                                                    <li class="text-primary d-lg-none">@(item.Product.Caption.Length > 11 ? item.Product.Caption.Substring(0, 10) + " .." : item.Product.Caption)</li>
                                                    <li class=" m-0 opacity-75" style="font-size:0.7rem !important; width:fit-content;">@(item.Product.Code + item.Product.Id)</li>
                                                </ul>
                                            </div>
                                            <div class="col-lg-1 col-3 py-1 text-center text-success">
                                                @item.Qty
                                            </div>
                                            <div class=" col-lg-2 col-4 py-1 text-start px-0 ps-2 opacity-75">
                                                <ul class="d-flex flex-column justify-content-start p-0 m-0 text-success">
                                                    <li>&#64; @((item.Price).ToString("n0"))</li>
                                                    <li class=" m-0 opacity-75 " style="font-size:0.7rem !important; width:fit-content;">
                                                        &sum; @((item.Price * (item.Qty)).ToString("n0"))
                                                    </li>
                                                </ul>
                                            </div>
                                            <div class="col-2 d-none d-lg-block py-1 text-md-start text-center">
                                                <ul class="d-flex flex-column justify-content-start p-0 m-0">
                                                    <li>&#64; @(item.Cost.ToString("n0"))</li>
                                                    <li class=" m-0 opacity-75 " style="font-size:0.7rem !important; width:fit-content;">&sum; @((item.Cost * item.Qty).ToString("n0"))</li>
                                                </ul>
                                            </div>
                                            <div class="col-2 d-none d-lg-block py-1 text-md-start text-center">
                                                <ul class="d-flex flex-column justify-content-start p-0 m-0">
                                                    <li>&#64; @((item.Price - item.Cost).ToString("n0"))</li>
                                                    <li class=" m-0 opacity-75 " style="font-size:0.7rem !important; width:fit-content;">&sum; @(((item.Price - item.Cost) * item.Qty).ToString("n0"))</li>
                                                </ul>
                                            </div>
                                            <div class="col-1 d-none d-lg-block py-1 text-center opacity-75 ">
                                                @(item.OldStock)
                                            </div>
                                            <div class="col-1 d-none d-lg-block py-1 text-center opacity-75">
                                                @(item.OldStock - item.Qty)
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class="row text-start bg-white">
    <div class="col-lg-4 col-12 px-0 pt-2 d-flex flex-row flex-wrap justify-content-start">
        <ul class="p-0 m-0 d-flex flex-row justify-content-start flex-wrap">
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@FromDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="From Date" />
                    <label for="floatingInput" class="text-unique">
                        From Date
                    </label>
                </div>
            </li>
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@ToDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="To Date" />
                    <label for="floatingInput" class="text-unique">
                        To Date
                    </label>
                </div>
            </li>
            <li class="py-2">
                <ul class="p-0 m-0 d-flex flex-md-column flex-row">
                    <li class="p-0 m-0 text-unique">
                        <button @onclick=@(()=>ChangeDate()) class="btn btn-sm btn-primary text-white rounded border-0"><i class="bi bi-funnel text-white"></i></button>
                    </li>
                    <li class="p-0 m-0 text-unique mt-1 ps-md-0 ps-3">
                        <button @onclick=@(()=>Reset()) class="btn btn-sm text-white rounded border-0 py-0 px-1 ms-1"><i class="bi bi-arrow-clockwise text-muted" style="font-size:0.75rem !important"></i></button>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
    <div class="col-lg-8 col-12">
        <div class="row mt-3 mb-4" style="font-size:0.7rem !important">
            <div class="col-md-4 col-12 rounded-3 px-0">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique bg-primary bg-opacity-50 rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL SALES
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillSales).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
            <div class="col-md-4 col-12 mt-md-0 mt-3 px-md-3 px-0">
                <ul class="p-2 bg-xss rounded m-0 text-start">
                    <li class="p-2 m-0 text-unique bg-green rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL RETURN
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillReturn).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
            <div class="col-md-4 col-12 mt-md-0 mt-3 rounded-3 px-0">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique bg-danger bg-opacity-50 rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL COST
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillCosts).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
        </div>
    </div
</div>

<div class="row rounded py-2 border-bottom text-unique bg-xss">
    <div class="col-md-1 d-none d-md-block py-2 text-center">#</div>
    <div class="col-md-2 col-3 py-1 text-start ">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Bill</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">Receipt</li>
        </ul>
    </div>
    <div class="col-2 py-1 text-start ">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Sold</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">&sum; Qty</li>
        </ul>
    </div>
    <div class="col-md-2 ps-0 col-4 py-1 text-start ">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Retail</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">&sum; Retail</li>
        </ul>
    </div>
    <div class="col-md-2 d-none d-md-block py-1 ps-0 text-start ">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Cost</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">&sum; Cost</li>
        </ul>
    </div>
    <div class=" col-md-2 col-3 py-1 px-0 text-start ">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Profit</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">&sum; Profit</li>
        </ul>
    </div>
    <div class="col-md-1 ps-0 d-md-block d-none py-1 text-start " style="font-size:0.8rem !important;">
        <ul class="d-flex flex-column justify-content-start m-0 p-0">
            <li>Date</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;">Day & Time</li>
        </ul>
    </div>
</div>
@{
    if(!TheseTempBills.Any()){
        <div class="container text-center">
            <p class="p-3 fs-4 text-unique fw-lighter bg-light">--:--</p>
        </div>
    }
    else{
        foreach(var item in TheseTempBills){
            Profit = ((item.ProductBill.Sum(x => (x.Qty * x.Price))) - ((item.ProductBill.Sum(x => (x.Qty * x.Cost)))));
            ProfitColor = (Profit) > 0 ? "text-success" : "text-danger";

            <div class="row bg-xss border-bottom py-0 text-unique" style="font-size:0.8rem !important">
                <div class="col-md-1 d-none d-md-block py-1 text-center">@(TheseBills.IndexOf(item) + 1)</div>
                <div class="col-md-2 col-3 py-1 text-start text-unique">
                    @*<a class="p-0 m-0" href="Sales/Details/@(item.Id)">*@
                        <ul type="button" data-bs-toggle="modal" data-bs-target="#Search" onclick=@(()=>ViewBillAsap(item)) class="d-flex flex-column justify-content-start p-0 m-0 text-unique" style="font-size:0.8rem !important; cursor:pointer;">
                            <li class="fw-bolder text-primary opacity-75 txtshadow" style="font-size:0.8rem !important;">@(item.Code + item.Id)</li>
                            <li class=" opacity-75 fw-bolder" style="font-size:0.7rem !important;">---</li>
                        </ul>
                    @*</a>*@
                </div>
                <div class="col-2 py-1 text-start txtshadow">
                    @(item.ProductBill.Sum(x => x.Qty))
                </div>
                <div class="col-md-2 col-4 py-1 ps-0 text-start text-unique">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0">
                        <li class="fw-bolder text-primary">&sum; @((item.ProductBill.Sum(x=> (x.Qty * x.Price))).ToString("n0"))</li>
                    </ul>
                </div>
                <div class="col-md-2 d-none d-md-block py-1 ps-0 text-start text-unique">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0">
                        <li class="fw-bolder opacity-75">&sum; @((item.ProductBill.Sum(x=> (x.Qty * x.Cost))).ToString("n0"))</li>
                    </ul>
                </div>
                <div class="col-md-2 col-3 py-1 ps-0 text-start text-unique">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0">
                        <li class=" @ProfitColor fw-bolder"style="font-size:0.8rem !important;">
                            &sum; @(Profit.ToString("n0"))
                        </li>
                    </ul>
                </div>
                <div class="ps-0 col-md-1 d-md-block d-none py-1 text-start text-unique" style="font-size:0.75rem !important; ">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0">
                        <li style="font-size:0.8rem !important;">@(item.DateCreated.ToString("dd MMM yy"))</li>
                        <li class=" opacity-75 d-none d-sm-block" style="font-size:0.7rem !important;">@(item.DateCreated.ToString("ddd hh : mm"))</li>
                    </ul>
                </div>
            </div>
        }
        <InnerPagination 
            InnerNextPage=@InnerNextPage
            InnerPreviousPage=@InnerPreviousPage
            InnerCurrentPage=@InnerCurrentPage
            InnerTotalPages=@InnerTotalPages 
        />
    }
}

@code{
    [Parameter]
    public UserModel UserToCheck {get;set;}

    private List<BillModel>? TheseBills = new();
    private List<BillModel>? TheseTempBills = new();
    private DateOnly FromDate;
    private DateOnly ToDate;

    private decimal Profit = 0;
    private string ProfitColor = "";
    private decimal FullCost = 0;
    private decimal FullRetail = 0;

    private BillModel SendBill = new();
    private bool ViewBill = false;

    //For Sales info fx
    private int NumOfBills = 0;
    private int NumOfPcs = 0;
    private int NumOfItems = 0;
    private decimal TotalBillSales = 0;
    private decimal TotalBillCosts = 0;
    private decimal TotalBillReturn = 0;

    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 0;
    private int InnerPageSize = 10 ;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();  
        FromDate = DateOnly.FromDateTime(UserToCheck.Bill.FirstOrDefault().DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);

        TheseTempBills = new();
        TheseBills = new();
        await Reset();
    }

    private async Task<List<BillModel>> GrabBills()
    {
        TheseBills = new();
        if(UserToCheck.Bill.Any())
        {        
            TheseBills = UserToCheck.Bill
            .OrderBy(x => x.Id)
            .ToList();
        }
        else{
            TheseBills = new();
        }

        return TheseBills;
    }

    private async Task InnerNextPage()
    {
        TheseTempBills = new();
        var Fetched = await GrabBills();

        if (Fetched != null && Fetched.Count > 0)
        {
            InnerTotalPages = (int)(Math.Ceiling((double)((Fetched).Count()) / InnerPageSize));

            if (InnerCurrentPage < InnerTotalPages)
            {
                InnerCurrentPage++;
            }
            else
            {
                InnerCurrentPage = InnerTotalPages;
            }

            TheseTempBills = Fetched
            .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();

            SalesInfo();
        }

        StateHasChanged();
    }

    private async Task InnerPreviousPage()
    {

        TheseTempBills = new();
        var Fetched = await GrabBills();

        if (Fetched != null && Fetched.Count > 0)
        {
            InnerTotalPages = (int)(Math.Ceiling((double)((Fetched).Count()) / InnerPageSize));

            if (InnerCurrentPage > 1)
            {
                InnerCurrentPage--;
            }
            else
            {
                InnerCurrentPage = 1;
            }

            TheseTempBills = Fetched
            .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();

            SalesInfo();
        }

        StateHasChanged();
    }

    private void SalesInfo()
    {
        NumOfBills = 0;
        NumOfPcs = 0;
        NumOfItems = 0;
        TotalBillCosts = 0;
        TotalBillReturn = 0;
        TotalBillSales = 0;

        NumOfBills = UserToCheck.Bill
        .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
        .Count();



        foreach (var ABill in UserToCheck.Bill.Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate))))
        {
            NumOfPcs += ABill.ProductBill.Sum(q => q.Qty);
            //var x = from ABill select distinct ProductId;
            //NumOfItems += x.Count;
            foreach(var pb in ABill.ProductBill)
            {
                TotalBillSales += (decimal)(pb.Qty * pb.Price);
                TotalBillCosts += (decimal)(pb.Qty * pb.Cost);
            }
        }

        TotalBillReturn = (TotalBillSales - TotalBillCosts);
    }

    private async Task Reset()
    {
        FromDate = DateOnly.FromDateTime(UserToCheck.DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);
        InnerCurrentPage = 0;
        await InnerNextPage();
    }

    private async void ChangeDate()
    {
        InnerCurrentPage = 0;
        await InnerNextPage();
    }

    private void GetFullCostRetail(BillModel ThisData)
    {
        FullCost = 0;
        FullRetail = 0;

        if (ThisData != null)
        {
            foreach (var xitem in ThisData.ProductBill)
            {
                FullCost += (decimal)((xitem.Qty) * (xitem.Cost));
                FullRetail += (decimal)((xitem.Qty) * (xitem.Price));
            }
        }
    }

    private void ViewBillAsap(BillModel G){
        ViewBill = true;
        SendBill = G;
        StateHasChanged();
    }
}