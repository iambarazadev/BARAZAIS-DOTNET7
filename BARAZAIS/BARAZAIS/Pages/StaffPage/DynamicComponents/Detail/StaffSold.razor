@inject IDbContextFactory<BarazaContext> MyFactory
@attribute [Authorize]

<div class="row text-start bg-white">
    <div class="col-lg-4 col-12 px-0 pt-2 d-flex flex-row flex-wrap justify-content-start">
        <ul class="p-0 m-0 d-flex flex-row justify-content-start flex-wrap">
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@FromDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="From Date" />
                    <label for="floatingInput" class="text-unique">
                        From Date
                    </label>
                </div>
            </li>
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@ToDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="To Date" />
                    <label for="floatingInput" class="text-unique">
                        To Date
                    </label>
                </div>
            </li>
            <li class="py-2">
                <ul class="p-0 m-0 d-flex flex-md-column flex-row">
                    <li class="p-0 m-0 text-unique">
                        <button @onclick=@(()=>ChangeDate()) class="btn btn-sm btn-primary text-white rounded border-0"><i class="bi bi-funnel text-white"></i></button>
                    </li>
                    <li class="p-0 m-0 text-unique mt-1 ps-md-0 ps-3">
                        <button @onclick=@(()=>Reset()) class="btn btn-sm text-white rounded border-0 py-0 px-1 ms-1"><i class="bi bi-arrow-clockwise text-muted" style="font-size:0.75rem !important"></i></button>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
    <div class="col-lg-8 col-12">
        <div class="row mt-3 mb-4" style="font-size:0.7rem !important">
            <div class="col-md-4 col-12 rounded-3 px-0">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique bg-primary bg-opacity-50 rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL SALES
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillSales).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
            <div class="col-md-4 col-12 mt-md-0 mt-3 px-md-3 px-0">
                <ul class="p-2 bg-xss rounded m-0 text-start">
                    <li class="p-2 m-0 text-unique bg-green rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL RETURN
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillReturn).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
            <div class="col-md-4 col-12 mt-md-0 mt-3 rounded-3 px-0">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique bg-danger bg-opacity-50 rounded" style="font-size:0.6rem !important; width:fit-content;">
                        TOTAL COST
                    </li>
                    <li class="p-2 py-0 m-0 fs-5 fw-normal">
                        @((TotalBillCosts).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
                    </li>
                </ul>
            </div>
        </div>
    </div
</div>
<div class="row mb-2 text-unique">
    <div class="col-1 py-2 text-center">#</div>
    <div class="col-lg-2 col-3 py-1 text-start text-unique">
        <NavLink class="p-0 m-0 text-unique" href="" >
            <ul class="d-flex flex-column justify-content-start m-0 p-0">
                <li>BILL</li>
                <li class=" p-0 opacity-75" style="font-size:0.7rem !important; width:fit-content;">Receipt</li>
            </ul>
        </NavLink>
    </div>
    <div class="col-lg-2 col-3 py-1 text-start text-unique">
        <ul class=" m-0 p-0 text-start">
            <li class="text-start">Total</li>
            <li class="opacity-75 text-start" style="font-size:0.7rem !important;">Bill Sale</li>
        </ul>
    </div>
    <div class=" col-lg-1 py-1 text-center text-unique d-none d-lg-block">
        Items
    </div>
    <div class=" col-2 py-1 text-center text-unique">
        <ul class=" m-0 p-0 text-start">
            <li class="text-center">Qty</li>
            <li class="opacity-75 text-center" style="font-size:0.7rem !important;">Pcs</li>
        </ul>
    </div>
    <div class="col-lg-2 col-3 py-1 ps-0 text-center text-unique" style="font-size:0.8rem !important;">
        <ul class=" m-0 p-0 text-start">
            <li class="text-start">Date</li>
            <li class="opacity-75 text-start" style="font-size:0.7rem !important;">Day & Time</li>
        </ul>
    </div>
    <div class="col-lg-2 d-none d-lg-block py-1 ps-0 text-center text-unique" style="font-size:0.8rem !important;">
        <ul class=" m-0 p-0 text-start">
            <li class="text-start">Responsible</li>
            <li class="opacity-75 text-start" style="font-size:0.7rem !important;">Code</li>
        </ul>
    </div>
</div>
@{
    if(!TheseTempBills.Any()){
        <div class="container text-center">
            <p class="p-3 fs-4 text-unique fw-lighter bg-light">--:--</p>
        </div>
    }
    else{
        foreach(var item in TheseTempBills){
            <div class="row bg-xss border-bottom text-unique" style="font-size:0.8rem !important;">
                <div class="col-1 py-1 text-center">@(TheseTempBills.IndexOf(item)+1)</div>
                <div class="col-lg-2 col-3 py-1 text-start text-unique">
                    <a href="Purchases/Details/@item.Id" class="p-0 m-0 text-unique"  style="font-size:0.8rem !important;">
                        <ul class="d-flex flex-column justify-content-start m-0 p-0">
                            <li class="fw-bolder text-primary opacity-75 txtshadow">@(item.Code + item.Id)</li>
                            <li class=" opacity-75 fw-bolder" style="font-size:0.7rem !important; width:fit-content;">--</li>
                        </ul>
                    </a>
                </div>
                <div class="col-lg-2 col-3 py-1 pe-0 text-start text-unique">
                    &sum; @((item.ProductBill.Sum(x => (x.Qty * x.Price))).ToString("n0"))
                </div>
                <div class=" col-lg-1 py-1 text-center text-primary d-none d-lg-block">
                    @(item.ProductBill.Count)
                </div>
                <div class="col-2 py-1 text-center txtshadow">
                    @(item.ProductBill.Sum(x => x.Qty))
                </div>
                <div class="col-lg-2 col-3 py-1 ps-0  text-start text-unique" style="font-size:0.75rem !important; ">
                    <ul class=" m-0 p-0">
                        <li class="p-0 m-0 text-primary">@(item.DateCreated.ToString("dd MMM yy"))</li>
                        <li class=" opacity-75 d-none d-sm-block p-0 m-0" style="font-size:0.7rem !important;">@(item.DateCreated.ToString("ddd hh : mm"))</li>
                    </ul>
                </div>
                <div class="col-lg-2 d-none d-lg-block py-1 ps-0 text-center text-unique" style="font-size:0.8rem !important;">
                    <ul class=" m-0 p-0 text-start">
                        <li class="text-start">@(item.User.Code + item.User.Id)</li>
                        <li class="opacity-75 text-start text-capitalize" style="font-size:0.7rem !important;">@(item.User.FirstName + " " + item.User.LastName)</li>
                    </ul>
                </div>
            </div>
        }
        <InnerPagination 
            InnerNextPage=@InnerNextPage
            InnerPreviousPage=@InnerPreviousPage
            InnerCurrentPage=@InnerCurrentPage
            InnerTotalPages=@InnerTotalPages 
        />
    }
}

@code{
    [Parameter]
    public UserModel UserToCheck {get;set;}

    private List<BillModel>? TheseBills = new();
    private List<BillModel>? TheseTempBills = new();
    private DateOnly FromDate;
    private DateOnly ToDate;

    //For Sales info fx
    private int NumOfBills = 0;
    private int NumOfPcs = 0;
    private int NumOfItems = 0;
    private decimal TotalBillSales = 0;
    private decimal TotalBillCosts = 0;
    private decimal TotalBillReturn = 0;


    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 0;
    private int InnerPageSize = 10 ;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();  
        FromDate = DateOnly.FromDateTime(UserToCheck.Bill.FirstOrDefault().DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);

        TheseTempBills = new();
        TheseBills = new();
        await Reset();
    }

    private async Task<List<BillModel>> GrabBills()
    {
        TheseBills = new();
        if(UserToCheck.Bill.Any())
        {        
            TheseBills = UserToCheck.Bill
            .OrderBy(x => x.Id)
            .ToList();
        }
        else{
            TheseBills = new();
        }

        return TheseBills;
    }

    private async Task InnerNextPage()
    {
        TheseTempBills = new();
        var Fetched = await GrabBills();

        if (Fetched != null && Fetched.Count > 0)
        {
            InnerTotalPages = (int)(Math.Ceiling((double)((Fetched).Count()) / InnerPageSize));

            if (InnerCurrentPage < InnerTotalPages)
            {
                InnerCurrentPage++;
            }
            else
            {
                InnerCurrentPage = InnerTotalPages;
            }

            TheseTempBills = Fetched
            .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();

            await SalesInfo();
        }

        StateHasChanged();
    }

    private async Task InnerPreviousPage()
    {

        TheseTempBills = new();
        var Fetched = await GrabBills();

        if (Fetched != null && Fetched.Count > 0)
        {
            InnerTotalPages = (int)(Math.Ceiling((double)((Fetched).Count()) / InnerPageSize));

            if (InnerCurrentPage > 1)
            {
                InnerCurrentPage--;
            }
            else
            {
                InnerCurrentPage = 1;
            }

            TheseTempBills = Fetched
            .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();

            await SalesInfo();
        }

        StateHasChanged();
    }

    private async Task SalesInfo()
    {
        NumOfBills = 0;
        NumOfPcs = 0;
        NumOfItems = 0;
        TotalBillCosts = 0;
        TotalBillReturn = 0;
        TotalBillSales = 0;

        NumOfBills = UserToCheck.Bill
        .Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate)))
        .Count();



        foreach (var ABill in UserToCheck.Bill.Where(x => (((DateOnly.FromDateTime(x.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.DateCreated)) <= ToDate))))
        {
            NumOfPcs += ABill.ProductBill.Sum(q => q.Qty);
            //var x = from ABill select distinct ProductId;
            //NumOfItems += x.Count;
            foreach(var pb in ABill.ProductBill)
            {
                TotalBillSales += (decimal)(pb.Qty * pb.Price);
                TotalBillCosts += (decimal)(pb.Qty * pb.Cost);
            }
        }

        TotalBillReturn = (TotalBillSales - TotalBillCosts);
    }

    private async Task Reset()
    {
        FromDate = DateOnly.FromDateTime(UserToCheck.DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);
        InnerCurrentPage = 0;
        await InnerNextPage();
    }

    private async void ChangeDate()
    {
        InnerCurrentPage = 0;
        await InnerNextPage();
    }
}