@page "/Taxes/ListView"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

<div class="row pb-3 mt-2 rounded bg-white shadow-sm">
    <div class="col-12">
        <Header
            Title=@Title
            LineText=@LineText
            NewUrl=@NewUrl
            ViewUrl=@ViewUrl
            ViewUrlIcon=@ViewUrlIcon
            />
    </div>
</div>

<div class="row bg-white my-3 rounded shadow-sm">
    <div class="col-12 px-3 bg-xs rounded-top shadow-sm">
        <div class="row bg-xs">
            <div class="col-1 text-center py-3">
                #
            </div>
            <div class="col-4 text-start py-3">
                Tax
            </div>
            <div class="col-3 text-center py-3">
                Products
            </div>
            <div class="col-4 col-lg-3 text-md-start text-center py-3">
                Date Updated
            </div>
            <div class="d-none d-lg-block col-lg-1 text-start py-3">
                Action
            </div>
        </div>
    </div>
    <div class="col-12 px-3 pt-2">
        @{
            if (!TheseTaxes.Any())
            {
                <div class="container text-center">
                    <p class="p-3  fs-4 text-unique fw-lighter opacity-75 text-capitalize">-- : --</p>
                </div>
            }
            else
            {
                foreach (var item in TheseTaxes)
                {
                    <div class="row border-bottom bg-xss" style="font-size:0.8rem !important">
                        <div class="col-1 text-center py-1">
                            @(item.Id)
                        </div>
                        <div class="col-4 text-start py-1">
                            <a href=@("Taxes/Details/"+(item.Id)) class="p-0 m-0">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-primary" style="font-size:0.8rem !important">
                                        @(item.Code + item.Id)
                                    </li>
                                    <li class="p-0 m-0 text-capitalize text-muted" style="font-size:0.8rem !important">
                                        @item.Caption
                                    </li>
                                </ul>
                            </a>
                        </div>
                        <div class="col-3 text-center py-1">
                            @item.Product.Count
                        </div>
                        <div class="col-4 col-lg-3 text-md-start text-center py-1">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 text-primary">
                                    @((item.DateCreated).ToString("dd MMM yy"))
                                </li>
                                <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                    @(item.DateCreated.ToString("ddd, hh : mm"))
                                </li>
                            </ul>
                        </div>
                        <div class="d-none d-lg-block col-lg-1 text-start pt-2" style="padding-top:1rem !important;">
                            <ul class="p-0 m-0 ">
                                <li class="p-0 m-0">
                                    <a href="Taxes/Edit/@item.Id" class=" text-primary px-md-3 px-2 py-1 border border-2 " style="width:fit-content; margin:1px auto;">Edit</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                }

                <Pagination FirstPage=@FirstPage
                    LastPage=@LastPage
                    NextPage=@NextPage
                    PreviousPage=@PreviousPage
                    TotalPages=@TotalPages
                    CurrentPage=@CurrentPage
                        />
            }
        }
    </div>
</div>

@code {
    //Header Component
    private string Title = "Taxes";
    private string LineText = "List view";
    private string NewUrl = "Taxes/New";
    private string ViewUrl = "Taxes/Details";
    private string ViewUrlIcon = "bi bi-ui-checks-grid";

    //TaxModel Variables
    private List<TaxModel> TheseTaxes = new();

    //Pagination Variables
    private int PageSize = 50;
    private int TotalPages = 1;
    private int CurrentPage = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await NextPage();
    }

    private async Task NextPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Taxes.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));

            if (CurrentPage < TotalPages)
            {
                CurrentPage++;
            }
            else
            {
                CurrentPage = TotalPages;
            }

            //TheseTaxes = await repo.Taxes.GetAllRecords(PageSize, CurrentPage);
            TheseTaxes = await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Taxes.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));

            if (CurrentPage > 1)
            {
                CurrentPage--;
            }
            else
            {
                CurrentPage = 1;
            }

            //TheseTaxes = await repo.Taxes.GetAllRecords(PageSize, CurrentPage);
            TheseTaxes = await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task FirstPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Taxes.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = 1;

            //TheseTaxes = await repo.Taxes.GetAllRecords(PageSize, CurrentPage);
            TheseTaxes = await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task LastPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Taxes.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = TotalPages;

            //TheseTaxes = await repo.Taxes.GetAllRecords(PageSize, CurrentPage);
            TheseTaxes = await repo.Taxes.GetAllTaxesDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }
}

