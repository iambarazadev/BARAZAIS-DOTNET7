@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

<div class="row my-3 bg-white rounded shadow-sm" style="font-size:0.8rem !important">
    <div class=" col-md-4 col-12 rounded-3 p-3">
        <ul class="p-2 m-0 text-start bg-xss rounded">
            <li class="p-2 m-0 text-unique">
                TOTAL SALES
            </li>
            <li class="p-2 py-0 m-0 text-primary">
                &sum; @((TotalSales).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
    <div class="col-md-4 col-12 rounded-3 p-3">
        <ul class="p-2 bg-xss rounded m-0 text-start">
            <li class="p-2  m-0 text-unique">
                TOTAL RETURN
            </li>
            <li class="p-2 py-0 m-0 text-success">
                &sum; @((TotalReturn).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
    <div class="col-md-4 col-12 p-3">
        <ul class="p-2 m-0 text-start bg-xss rounded">
            <li class="p-2 m-0 text-unique">
                TOTAL COST
            </li>
            <li class="p-2 py-0 m-0 text-danger opacity-75">
                &sum; @((TotalCost).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
</div>

@code{
    
    [Parameter]
    public DateOnly DateA {get;set;}
    
    [Parameter]
    public DateOnly DateB {get;set;}
    
    [Parameter]
    public int Uid {get;set;} = 0;
    
    private List<BillModel> TheseBills = new();
    private int NumOfBills = 0;
    private int NumOfPcs = 0;
    private int NumOfItems = 0;
    private decimal TotalSales = 0;
    private decimal TotalCost = 0;
    private decimal TotalReturn = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await SetSummary();
    }
    
    private async Task SetSummary(){
        TheseBills = new();
        NumOfBills = 0;
        NumOfPcs = 0;
        NumOfItems = 0;
        TotalCost = 0;
        TotalReturn = 0;
        TotalSales = 0;
        List<ProductModel> TempItems = new();
        
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            if(Uid > 0){
                TheseBills = await repo.Bills.GetAllBillsDetailedAsync(DateA, DateB,Uid);
                NumOfBills = TheseBills.Count();
                
                foreach(var bill in TheseBills){
                    foreach(var prodbill in bill.ProductBill){
                        NumOfPcs += prodbill.Qty;
                        TotalCost += ((prodbill.Qty * prodbill.Cost));
                        TotalSales += ((prodbill.Qty * prodbill.Price));
                        TempItems.Add(prodbill.Product);
                    }
                }
                
                NumOfItems = TempItems.Distinct().Count();
                TotalReturn = TotalSales - TotalCost;
            }
            else{
                TheseBills = await repo.Bills.GetAllBillsDetailedAsync(DateA, DateB);
                NumOfBills = TheseBills.Count();
                
                foreach(var bill in TheseBills){
                    foreach(var prodbill in bill.ProductBill){
                        NumOfPcs += prodbill.Qty;
                        TotalCost += ((prodbill.Qty * prodbill.Cost));
                        TotalSales += ((prodbill.Qty * prodbill.Price));
                        TempItems.Add(prodbill.Product);
                    }
                }
                
                NumOfItems = TempItems.Distinct().Count();
                TotalReturn = TotalSales - TotalCost;
            }
            

            await repo.CompleteAsync();
            repo.Dispose();
        }
    }
}