@page "/Sales/Details"
@page "/Sales/Details/{Sn:int}"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation
        

@{
    if (ThisBill.Id < 1)
    {
        <div class="row">
            <div class="text-unique txtshadow fs-4">
                --:--
            </div>
        </div>
    }
    else
    {
        <div class="row mt-2 bg-white shadow-sm rounded">
            <div class="col-12">
                <Header Title=@Title
                LineText=@LineText
                NewUrl=@NewUrl
                ViewUrl=@ViewUrl
                ViewUrlIcon=@ViewUrlIcon 
                />
            </div>
            <div class="col-12">
                <hr class="text-muted"/>
            </div>
            <div class="col-lg-6 col-12">
                <ul class="d-flex flex-column p-0 m-0">
                    <li class="text-md-start text-center">
                        <h3 class="txtshadow text-capitalize fw-bold fs-4">Code : @(ThisBill.Code + ThisBill.Id)</h3>
                    </li>
                    <li class="me-2">
                        <ul class="d-flex flex-column justify-content-md-start px-0 pb-3 justify-content-center">
                            <li class="text-md-start text-center">Date Of Issue </li>
                            <li class=" m-0 opacity-75 text-md-start text-center" style="font-size:0.8rem !important; "> 
                                @ThisBill.DateCreated.ToString("MMM dd yyyy, ddd HH:mm") 
                            </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="col-lg-6 col-md-12">
                <Pagination FirstPage=@FirstPage
                    LastPage=@LastPage
                    NextPage=@NextPage
                    PreviousPage=@PreviousPage
                    CurrentPage=@CurrentPage
                    TotalPages=@TotalPages />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="row text-start mt-3">
                    <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0">
                        <div class="row text-start bg-white rounded shadow-sm">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top">
                                Receipt Info
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0">
                                        Receipt Numb : --
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        Rceceipt Date : --
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-md-4">
                        <div class="row text-start bg-white rounded shadow-sm">
                            <div class="col-12 p-3 bg-xs shadow-sm rounded-top ">
                                Total Retail
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0">
                                       Items : @(ThisBill.ProductBill.Count) , Pcs : @(ThisBill.ProductBill.Sum(x => x.Qty))
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        &sum; @((FullRetail).ToString("n0"))
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-lg-4">
                        <div class="row text-start bg-white rounded shadow-sm ">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                                Total Cost
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0">
                                       Items : @(ThisBill.ProductBill.Count) , Pcs : @(ThisBill.ProductBill.Sum(x => x.Qty))
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        &sum; @((FullCost).ToString("n0"))
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-md-4">
                        <div class="row text-start bg-white rounded shadow-sm">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                                Responsible
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-capitalize">
                                        @ThisBill.User.FirstName @ThisBill.User.LastName
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        Code : @(ThisBill.User.Code + ThisBill.User.Id)
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row bg-white rounded shadow-sm">
                    <div class="col-12 rounded-top text-white shadow-sm txtshadow bg-xs px-3">
                        <div class="row">
                            <div class="col-1 text-center py-3 fw-bolder">#</div>
                            <div class="col-lg-2 col-4 py-3 text-start">Product</div>
                            <div class="col-lg-1 col-3 py-3 text-center ">Sold</div>
                            <div class="col-lg-2 col-4 py-3 text-start">Retail Price</div>
                            <div class="col-2 d-none d-lg-block py-3 text-md-start text-center ">AtCostOf</div>
                            <div class="col-2 d-none d-lg-block py-3 text-md-start text-center ">Return</div>
                            <div class="col-1 d-none d-lg-block py-3 text-center ">Before</div>
                            <div class="col-1 d-none d-lg-block py-3 text-center">After</div>
                        </div>
                    </div>
                    <div class="col-12 px-3 pt-2">
                        @* Start Dynamic Products*@
                            @{
                                if(this.ThisBill.ProductBill.Any() && this.ThisBill.ProductBill.Count > 0){
                                        <ABillContent BillToCheck=@ThisBill/>
                                    }
                                else{
                                    <p class="fs-6 text-center text-unique py-3 px-5  bg-xss my-3" style="width:fit-content; margin:1px auto;">--:--</p>
                                    ThisBill.ProductBill = new();
                                }
                            }
                        @* End Dynamic ProductBills*@
                    </div>
                </div>
            </div>
        </div>

        @*End header*@
    }
}        

        
@code{
    // Url product Id
    [Parameter]
    public int Sn { get; set; } = 0;

    //Header Component
    private string Title = "Sales";
    private string LineText = "Bill Detail view";
    private string NewUrl = "Pos/0";
    private string ViewUrl = "Sales/ListView";
    private string ViewUrlIcon = "bi-view-stacked";

    //  Pagination
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private int PageSize = 1;
    
    // Data Variables
    private BillModel ThisBill = new();
    private decimal FullCost = 0;
    private decimal FullRetail = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ThisBill.ProductBill = new();
        await Start(Sn);
    }

    private async Task Start(int cid = 0)
    {
        ThisBill.ProductBill = new();
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TotalPages = repo.Bills.GetNoRecords();

            if (cid < 1 && TotalPages > 0)
            {
                ThisBill = (await repo.Bills.GetAllBillsDetailedAsync(1, 1)).SingleOrDefault();
                await GetFullCostRetailInfo(ThisBill);
                
                CurrentPage = (repo.Bills.GetIndexOf(ThisBill) + 1);

            }
            else if (cid > 0 && cid <= TotalPages)
            {
                ThisBill = await repo.Bills.GetDetailedBillAsync(cid);
                await GetFullCostRetailInfo(ThisBill);
                
                CurrentPage = (repo.Bills.GetIndexOf(ThisBill) + 1);
            }
            else
            {
                ThisBill = new();
                ThisBill.ProductBill = new();
            }

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task NextPage()
    {
        ThisBill.ProductBill = new();
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TotalPages = repo.Bills.GetNoRecords();

            if (CurrentPage < TotalPages)
            {
                CurrentPage++;
            }
            else
            {
                CurrentPage = TotalPages;
            }

            ThisBill = (await repo.Bills.GetAllBillsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            await GetFullCostRetailInfo(ThisBill);
            
            await repo.CompleteAsync();
            repo.Dispose();
        }
    }

    private async Task PreviousPage()
    {
        ThisBill.ProductBill = new();
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TotalPages = repo.Bills.GetNoRecords();

            if (CurrentPage > 1)
            {
                CurrentPage--;
            }
            else
            {
                CurrentPage = 1;
            }

            ThisBill = (await repo.Bills.GetAllBillsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            await GetFullCostRetailInfo(ThisBill);
            
            await repo.CompleteAsync();
            repo.Dispose();
        }
    }

    private async Task FirstPage()
    {
        ThisBill.ProductBill = new();
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TotalPages = repo.Bills.GetNoRecords();

            CurrentPage = 1;

            ThisBill = (await repo.Bills.GetAllBillsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            await GetFullCostRetailInfo(ThisBill);
            
            await repo.CompleteAsync();
            repo.Dispose();
        }
    }

    private async Task LastPage()
    {
        ThisBill.ProductBill = new();
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TotalPages = repo.Bills.GetNoRecords();

            CurrentPage = TotalPages;

            ThisBill = (await repo.Bills.GetAllBillsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            await GetFullCostRetailInfo(ThisBill);
            
            await repo.CompleteAsync();
            repo.Dispose();
        }
    }

    private async Task GetFullCostRetailInfo(BillModel ThisData)
    {
        FullCost = 0;
        FullRetail = 0;
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            if (ThisData != null)
            {
                foreach (var xitem in ThisData.ProductBill)
                {
                    FullCost += (decimal)((xitem.Qty) * (xitem.Cost));
                    FullRetail += (decimal)((xitem.Qty) * (xitem.Price));
                }
            }

            await repo.CompleteAsync();
            repo.Dispose();
        }
    }
}