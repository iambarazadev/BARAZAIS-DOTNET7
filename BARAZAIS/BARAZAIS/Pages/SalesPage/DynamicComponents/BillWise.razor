
@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

<div class="row my-3 bg-white rounded shadow-sm" style="font-size:0.8rem !important">
    <div class="col-md-4 col-12 rounded-3 p-3">
        <ul class="p-2 m-0 text-start bg-xss rounded">
            <li class="p-2 m-0 text-unique bg-primary bg-opacity-50 rounded" style="font-size:0.7rem !important; width:fit-content;">
                TOTAL SALES
            </li>
            <li class="p-2 py-0 m-0 fs-4 fw-normal">
                @((TotalSales).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
    <div class="col-md-4 col-12 mt-md-0 p-3">
        <ul class="p-2 bg-xss rounded m-0 text-start">
            <li class="p-2 m-0 text-unique bg-green rounded" style="font-size:0.7rem !important; width:fit-content;">
                TOTAL RETURN
            </li>
            <li class="p-2 py-0 m-0 fs-4 fw-normal">
                @((TotalReturn).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
    <div class="col-md-4 col-12 mt-md-0 rounded-3 p-3">
        <ul class="p-2 m-0 text-start bg-xss rounded">
            <li class="p-2 m-0 text-unique bg-danger bg-opacity-50 rounded" style="font-size:0.7rem !important; width:fit-content;">
                TOTAL COST
            </li>
            <li class="p-2 py-0 m-0 fs-4 fw-normal">
                @((TotalCost).ToString("n0"))
            </li>
            <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                @(NumOfBills) @(NumOfBills > 1 ? "Bills" : "Bill") <span class="bi bi-dot"></span> @(NumOfItems) @(NumOfItems > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(NumOfPcs) @(NumOfPcs > 1 ? "pcs" : "pc")
            </li>
        </ul>
    </div>
</div>

<div class="row my-3 bg-white rounded shadow-sm">
    <div class="col-12 bg-xs rounded-top">
        <div class="row">
            <div class="col-1 text-center py-3">
                #
            </div>
            <div class="col-md-1 col-2 text-start py-3">
                DateTime
            </div>
            <div class="col-md-2 col-3 text-start py-3">
                Bill
            </div>
            <div class=" col-md-2 col-3 text-start py-3">
                Retail
            </div>
            <div class=" col-md-2 col-3 text-start py-3">
                Return
            </div>
            <div class=" col-md-2 d-none d-md-block text-start py-3">
                Cost
            </div>
            <div class=" col-md-2 d-none d-md-block text-start py-3">
                Cashier
            </div>
        </div>
    </div>
    <div class="col-12 px-3 pt-2">
        @{
            if(!TheseBills.Any()){
                <div class="container text-center">
                    <p class="p-3  fs-4 text-unique fw-lighter opacity-75 text-capitalize">-- : --</p>
                </div>
            }
            else{
                foreach(var Bill in (TheseBills).OrderBy(x => x.Id).Reverse().ToList()){
                    FullCost = 0;
                    FullRetail = 0;

                    GetFullCostRetail(Bill);
                    <div class="row border-bottom bg-xss">
                        <div class="col-1 text-center py-1">
                            @(TheseTempBills.IndexOf(Bill) + 1)
                        </div>
                        <div class="col-md-1 col-2 text-start py-1 pe-0">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 text-primary d-none d-lg-block" style="font-size:0.8rem !important">
                                    @((Bill.DateCreated).ToString("dd MMM yy"))
                                </li>
                                <li class="p-0 m-0 text-muted d-none d-lg-block" style="font-size:0.8rem !important">
                                    @((Bill.DateCreated).ToString("ddd, HH:mm"))
                                </li>
                                <li class="p-0 m-0 text-primary d-lg-none" style="font-size:0.8rem !important">
                                    @((Bill.DateCreated).ToString("dd MMM"))
                                </li>
                            </ul>
                        </div>
                        <div class="col-md-2 col-3 text-start py-1">
                            <a href="Sales/Details/@(Bill.Id)" class="p-0 m-0">
                                <ul class="d-flex flex-column justify-content-start p-0 m-0 text-unique" style="font-size:0.8rem !important; cursor:pointer;">
                                    <li class="p-0 m-0 text-primary" style="font-size:0.8rem !important">
                                        @(Bill.Code + Bill.Id)
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        ---
                                    </li>
                                </ul>
                            </a>
                        </div>
                        <div class=" col-md-2 col-3 text-start py-1">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 text-primary" style="font-size:0.8rem !important">
                                    &sum; @((FullRetail).ToString("n0"))
                                </li>
                                <li class="p-0 m-0 text-muted" style="font-size:0.75rem !important">
                                    @(Bill.ProductBill.Count) @(Bill.ProductBill.Count > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(Bill.ProductBill.Sum(x => x.Qty)) @(Bill.ProductBill.Sum(x => x.Qty) > 1 ? "pcs" : "pc" )
                                </li>
                            </ul>
                        </div>
                        <div class=" col-md-2 col-3 text-start py-1">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 text-success" style="font-size:0.8rem !important">
                                    &sum; @((FullRetail - FullCost).ToString("n0"))
                                </li>
                                <li class="p-0 m-0 text-muted" style="font-size:0.75rem !important">
                                    @(Bill.ProductBill.Count) @(Bill.ProductBill.Count > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(Bill.ProductBill.Sum(x => x.Qty)) @(Bill.ProductBill.Sum(x => x.Qty) > 1 ? "pcs" : "pc" )
                                </li>
                            </ul>
                        </div>
                        <div class=" col-md-2  d-none d-md-block text-start py-1">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 opacity-75 text-danger" style="font-size:0.8rem !important">
                                    &sum; @((FullCost).ToString("n0"))
                                </li>
                                <li class="p-0 m-0 text-muted" style="font-size:0.75rem !important">
                                    @(Bill.ProductBill.Count) @(Bill.ProductBill.Count > 1 ? "Items" : "Item") <span class="bi bi-dot"></span> @(Bill.ProductBill.Sum(x => x.Qty)) @(Bill.ProductBill.Sum(x => x.Qty) > 1 ? "pcs" : "pc" )
                                </li>
                            </ul>
                        </div>
                        
                        <div class=" col-md-2 d-none d-md-block text-start py-1">
                            <ul class="p-0 m-0 text-start">
                                <li class="p-0 m-0 text-primary" style="font-size:0.8rem !important">
                                    @(Bill.User.Code + Bill.User.Id)
                                </li>
                                <li class="p-0 m-0 text-muted text-capitalize" style="font-size:0.8rem !important">
                                    @(Bill.User.FirstName + " " + Bill.User.LastName)
                                </li>
                            </ul>
                        </div>
                    </div>
                }
                
                <Pagination FirstPage=@FirstPage
                    LastPage=@LastPage
                    NextPage=@NextPage
                    PreviousPage=@PreviousPage
                    TotalPages=@TotalPages
                    CurrentPage=@CurrentPage
                />
            }
        }
    </div>
</div>


@code{
    [Parameter]
    public DateOnly FromThisDate {get;set;}
    
    [Parameter]
    public DateOnly ToThisDate {get;set;} 
    
    [Parameter]
    public int ThisUserId {get;set;}
    
    private SalesPoccoModel ThisSearch = new();
    private List<UserModel> TheseUsers = new();
    private List<BillModel> TheseBills = new();
    private List<BillModel> TheseTempBills = new();
    private BillModel PopperBill = new();
    
    //forpopping modal
    private bool ViewBill = false;
    
    //Summary
    private int NumOfBills = 0;
    private int NumOfPcs = 0;
    private int NumOfItems = 0;
    private decimal TotalSales = 0;
    private decimal TotalCost = 0;
    private decimal TotalReturn = 0;
    
    //Paging
    private int CurrentPage = 0;
    private int PageSize = 20;
    private int TotalPages = 0;
    
    private decimal FullCost = 0;
    private decimal FullRetail = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        ThisSearch = new();
        await FetchData();
    }
    
    private async Task NextPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TheseTempBills = await repo.Bills.GetAllBillsDetailedAsync(ThisSearch.FromDate,ThisSearch.ToDate, (int)ThisSearch.UserId);

            double Num = (double)(TheseTempBills.ToList().Count()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if (CurrentPage < TotalPages)
            {
                CurrentPage ++;
            }
            else
            {
                CurrentPage = TotalPages;
            }
                
            TheseBills = TheseTempBills
            .OrderBy(x => x.DateCreated)
            .Reverse()
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
            
            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }
    
    
    private async Task PreviousPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TheseTempBills = await repo.Bills.GetAllBillsDetailedAsync(ThisSearch.FromDate,ThisSearch.ToDate, (int)ThisSearch.UserId);

            double Num = (double)(TheseTempBills.ToList().Count()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            if (CurrentPage > 1)
            {
                CurrentPage --;
            }
            else
            {
                CurrentPage = 1;
            }
                
            TheseBills = TheseTempBills
            .OrderBy(x => x.DateCreated)
            .Reverse()
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
            
            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }
    
    
    private async Task FirstPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
           TheseTempBills = await repo.Bills.GetAllBillsDetailedAsync(ThisSearch.FromDate,ThisSearch.ToDate, (int)ThisSearch.UserId);

            double Num = (double)(TheseTempBills.ToList().Count()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            CurrentPage = 1;
                
            TheseBills = TheseTempBills
            .OrderBy(x => x.DateCreated)
            .Reverse()
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
            
            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task LastPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            TheseTempBills = await repo.Bills.GetAllBillsDetailedAsync(ThisSearch.FromDate,ThisSearch.ToDate, (int)ThisSearch.UserId);

            double Num = (double)(TheseTempBills.ToList().Count()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            
            CurrentPage = TotalPages;
                
            TheseBills = TheseTempBills
            .OrderBy(x => x.DateCreated)
            .Reverse()
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
            
            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }
    
    private void GetFullCostRetail(BillModel ThisData)
    {
        if (ThisData != null)
        {
            foreach (var xitem in ThisData.ProductBill)
            {
                FullCost += (decimal)((xitem.Qty) * (xitem.Cost));
                FullRetail += (decimal)((xitem.Qty) * (xitem.Price));
            }
        }
    }
    
    private async Task FetchData(){
        ThisSearch.UserId = (int)(ThisUserId);
        ThisSearch.FromDate = FromThisDate;
        ThisSearch.ToDate = ToThisDate;
        
        if(ThisSearch.ToDate >= ThisSearch.FromDate){
            
            NumOfBills = 0;
            NumOfPcs = 0;
            NumOfItems = 0;
            TotalCost = 0;
            TotalReturn = 0;
            TotalSales = 0;
            List<ProductModel> TempItems = new();
            
            using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
            {
                var Records = await repo.Bills.GetAllBillsDetailedAsync(ThisSearch.FromDate,ThisSearch.ToDate,(int)(ThisSearch.UserId));
                NumOfBills = Records.Count();
                
                foreach(var bill in Records){
                    foreach(var prodbill in bill.ProductBill){
                        NumOfPcs += prodbill.Qty;
                        TotalCost += ((prodbill.Qty * prodbill.Cost));
                        TotalSales += ((prodbill.Qty * prodbill.Price));
                        TempItems.Add(prodbill.Product);
                    }
                }
                
                NumOfItems = TempItems.Distinct().Count();
                TotalReturn = TotalSales - TotalCost;
                
                await repo.CompleteAsync();
                repo.Dispose();
            }
            
            CurrentPage = 0;
            await NextPage();
        }
        else{
            TheseBills = new();
        }
    }
    
    private void ViewBillAsap(int G){
        FullCost = 0;
        FullRetail = 0;
        PopperBill = new();
        PopperBill = TheseBills.Where(x => x.Id == G).SingleOrDefault();
        ViewBill = true;
        StateHasChanged();
    }
}
