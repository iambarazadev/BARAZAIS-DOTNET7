@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

<div class="row bg-white my-3 rounded shadow-sm">
    <div class="col-12 px-3 bg-xs rounded-top shadow-sm">
        <div class="row bg-xs">
            <div class="col-1 text-center py-3">
                #
            </div>
            <div class="col-3 text-start py-3">
                Product
            </div>
            <div class="col-2 text-md-start text-center py-3">
                Total Bills
            </div>
            <div class="col-2 text-start py-3">
                Total Sold Qty
            </div>
            <div class="col-2 text-start py-3">
                Total Retail
            </div>
            <div class="col-2 text-start py-3">
                Total Cost
            </div>
        </div>
    </div>
    <div class="col-12 px-3 pt-2">
        @{
    if (!TheseProducts.Any()){
            <div class="container text-center">
                <p class="p-3  fs-4 text-unique fw-lighter opacity-75 text-capitalize">-- : --</p>
            </div>
        }
        else{
            
            foreach(var item in TheseProducts){
                
                FullCost = 0;
                FullRetail = 0;
                GetFullPurchaseCost(item);
                
                <div class="row bg-xss border-bottom" style="font-size:0.8rem !important">
                    <div class="col-1 text-center py-1">
                        @(item.Id)
                    </div>
                    <div class="col-3 text-start py-1">
                        <a class="p-0 m-0" href="Products/Details/@item.Id">
                            <ul class="p-0 m-0 d-flex flex-column text-start">
                                <li class=" m-0 text-primary opacity-75" style="font-size:0.8rem !important; width:fit-content;">@(item.Code + item.Id)</li>
                                <li class="p-0 m-0 text-capitalize text-muted">@(item.Caption)</li>
                            </ul>
                        </a>
                    </div>
                    <div class="col-2 text-md-start text-center py-1">
                        @(item.ProductBill.Count)
                    </div>
                    <div class="col-2 text-start py-1">
                        @(item.ProductBill.Sum(x => x.Qty))
                    </div>
                    <div class="col-2 text-start py-1">
                        @((FullRetail).ToString("n0"))
                    </div>
                    <div class="col-2 text-start py-1">
                         @((FullCost).ToString("n0"))
                    </div>
                </div>
            }
            
        <Pagination FirstPage=@FirstPage
            LastPage=@LastPage
            NextPage=@NextPage
            PreviousPage=@PreviousPage
            TotalPages=@TotalPages
            CurrentPage=@CurrentPage 
        />
    }
}

    </div>
</div>


@code{
    
    //ProductModel Variables
    private List<ProductModel> TheseProducts = new();

    //Pagination Variables
    private int PageSize = 10;
    private int TotalPages = 1;
    private int CurrentPage = 0;

    private decimal FullCost = 0;
    private decimal FullRetail = 0;

    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await NextPage();
    }

    private async Task NextPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Products.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));

            if (CurrentPage < TotalPages){
                CurrentPage ++;
            }
            else{
                CurrentPage = TotalPages;
            }

            //TheseProducts = await repo.Products.GetAllRecords(PageSize, CurrentPage);
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Products.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));

            if (CurrentPage > 1){
                CurrentPage --;
            }
            else{
                CurrentPage = 1;
            }

            //TheseProducts = await repo.Products.GetAllRecords(PageSize, CurrentPage);
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task FirstPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Products.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = 1;

            //TheseProducts = await repo.Products.GetAllRecords(PageSize, CurrentPage);
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }

    private async Task LastPage()
    {
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            double Num = (double)(repo.Products.GetNoRecords()) / PageSize;
            TotalPages = (int)(Math.Ceiling(Num));
            CurrentPage = TotalPages;

            //TheseProducts = await repo.Products.GetAllRecords(PageSize, CurrentPage);
            TheseProducts = await repo.Products.GetAllProductsDetailedAsync(CurrentPage, PageSize);

            await repo.CompleteAsync();
            repo.Dispose();
        }

        StateHasChanged();
    }
    
    private void GetFullPurchaseCost(ProductModel ThisData)
    {
        if (ThisData != null)
        {
            foreach (var xitem in ThisData.ProductBill)
            {
                FullCost += (decimal)((xitem.Qty) * (xitem.Cost));
                FullRetail += (decimal)((xitem.Qty) * (xitem.Price));
            }
        }
    }
}