@page "/Adjustments/Stock/Details"
@page "/Adjustments/Stock/Details/{Sn:int}"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

@{
    if (ThisStockAdjustment.Id < 1)
    {
        <div class="row">
            <div class="text-unique txtshadow fs-4">
                --:--
            </div>
        </div>
    }
    else
    {
        FullDownCost = 0.0;
        FullUpCost = 0.0;
        TotalDownQty = 0;
        TotalUpQty = 0;
        FullAdjustmentCostDetail(ThisStockAdjustment);
        
        <div class="row mt-2 bg-white shadow-sm rounded">
            <div class="col-12">
                <Header Title=@Title
                LineText=@LineText
                NewUrl=@NewUrl
                ViewUrl=@ViewUrl
                ViewUrlIcon=@ViewUrlIcon />
            </div>
            <div class="col-12">
                <hr class="text-muted"/>
            </div>
            <div class="col-lg-6 col-12">
                <ul class="d-flex flex-column p-0 pb-3 m-0">
                    <li>
                        <h3 class="txtshadow fw-bold fs-4">Code : @(ThisStockAdjustment.Code + ThisStockAdjustment.Id)</h3>
                    </li>
                    <li class="me-2">
                        <ul class="d-flex flex-column justify-content-start p-0">
                            <li>Date Of Issue </li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"> @ThisStockAdjustment.DateCreated.ToString("ddd, dd MMM yyyy") </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="col-lg-6 col-md-12">
                <Pagination FirstPage=@FirstPage
                    LastPage=@LastPage
                    NextPage=@NextPage
                    PreviousPage=@PreviousPage
                    CurrentPage=@CurrentPage
                    TotalPages=@TotalPages />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="row text-start mt-3">
                    <div class="col-lg-4 mb-3 col-md-6 col-12 py-0">
                        <div class="row text-start bg-white rounded shadow-sm ">
                            <div class="col-12 p-3  bg-xs rounded-top shadow-sm ">
                                Cost Info [+ve Items]
                            </div>
                            <div class="col-12 p-3 ">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-success">
                                        <span class="text-dark me-1">Items [Pcs] : </span> @TotalUpQty
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        <span class="text-muted me-1">Total Cost : </span>@FullUpCost.ToString("n0")
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 mb-3 col-md-6 col-12 py-0 ps-md-4">
                        <div class="row text-start bg-white rounded shadow-sm ">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                                Cost Info [-ve Items]
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-danger">
                                         <span class="text-dark me-1">Items [Pcs] : </span> @TotalDownQty
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        <span class="text-muted me-1">Total Cost : </span> @FullDownCost.ToString("n0")
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4 mb-3 col-md-6 col-12 py-0 ps-lg-4">
                        <div class="row text-start bg-white rounded shadow-sm ">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                                Responsible
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-capitalize">
                                        @ThisStockAdjustment.User.FirstName @ThisStockAdjustment.User.LastName 
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        Code : @(ThisStockAdjustment.User.Code + ThisStockAdjustment.User.Id) | Phone : @ThisStockAdjustment.User.PhoneNumber
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row text-start mb-3 bg-white rounded shadow-sm">
                    <div class="col-12 py-2 pt-3">
                        Description [Note]
                    </div>
                    <div class="col-12 py-2 text-capitalize">
                        <p class="p-0 py-2 m-0 text-muted border-top" style="font-size:0.8rem !important">
                            @(ThisStockAdjustment.Description.Any() ? ThisStockAdjustment.Description : "--:--")
                        </p>
                    </div>
                </div>
                <div class="row bg-white rounded shadow-sm mb-3">
                    <div class="col-12 bg-xs px-3 rounded-top">
                        <div class="row text-white  shadow-sm txtshadow">
                            <div class="col-1 text-center py-3 fw-bolder">#</div>
                            <div class="col-lg-2 col-5 py-3 text-start">Product</div>
                            <div class="col-2 d-none d-lg-block py-3 text-start ">Before</div>
                            <div class="col-2 py-3 text-start ">Adjusted</div>
                            <div class="col-2 py-3 d-none d-lg-block text-start">At Cost</div>
                            <div class="col-lg-2 col-4 py-3 text-md-start text-start ">At Retail</div>
                            <div class="col-1 d-none d-lg-block py-3 text-start">Stock After</div>
                        </div>
                    </div>
                    <div class="col-12 px-3">
                        @*Dynamic component adjust list*@
                            @{
                                if(this.ThisStockAdjustment.ProductAdjustment != null && this.ThisStockAdjustment.ProductAdjustment.Count > 0){
                                        <InAdjust StockAdjustmentToCheck=@ThisStockAdjustment/>
                                    }
                                else{
                                    <p class="fs-6 text-center text-unique py-3 px-5  bg-xss my-3" style="width:fit-content; margin:1px auto;">--:--</p>
                                    ThisStockAdjustment.ProductAdjustment = new();
                                }
                            }
                        @*end of dynamics*@
                    </div>
                </div>
            </div>
        </div>

        @*End header*@
    }
}

@code {
    // Url product Id
    [Parameter]
    public int Sn { get; set; } = 0;

    //Header Component
    private string Title = "Stock Adjustments";
    private string LineText = "Detail view";
    private string NewUrl = "Adjustments/Stock/New";
    private string ViewUrl = "Adjustments/Stock/ListView";
    private string ViewUrlIcon = "bi-view-stacked";

    //  Pagination
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private int PageSize = 1;

    // Data Variables
    private AdjustmentModel ThisStockAdjustment = new();
    private double FullUpCost = 0.0;
    private double FullDownCost = 0.0;
    private int TotalUpQty = 0;
    private int TotalDownQty = 0;
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        Refresh();
        await Start(Sn);
    }
    
    private async Task Start(int cid = 0){
        Refresh();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Adjustments.GetNoRecords();
            
            if(cid < 1 && TotalPages > 0){
                ThisStockAdjustment = (await repo.Adjustments.GetAllStockAdjustmentsDetailedAsync(1,1)).SingleOrDefault();
                CurrentPage = (repo.Adjustments.GetIndexOf(ThisStockAdjustment) + 1 );
            }
            else if(cid > 0 && cid <= TotalPages){
                ThisStockAdjustment = await repo.Adjustments.GetDetailedStockAdjustmentAsync(cid);
                CurrentPage = (repo.Adjustments.GetIndexOf(ThisStockAdjustment) + 1 );
            }
            else{
                ThisStockAdjustment = new();
                Refresh();
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task NextPage(){
        Refresh();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Adjustments.GetNoRecords();
            
            if(CurrentPage < TotalPages ){
                CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            ThisStockAdjustment = (await repo.Adjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task PreviousPage(){
        Refresh();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Adjustments.GetNoRecords();
            
            if(CurrentPage > 1 ){
                CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            ThisStockAdjustment = (await repo.Adjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task FirstPage(){
        Refresh();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Adjustments.GetNoRecords();
            
            CurrentPage = 1; 
            
            ThisStockAdjustment = (await repo.Adjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task LastPage(){
        Refresh();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Adjustments.GetNoRecords();
            
            CurrentPage = TotalPages; 
            
            ThisStockAdjustment = (await repo.Adjustments.GetAllStockAdjustmentsDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task FullAdjustmentCostDetail(AdjustmentModel ThisData){
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            if(ThisData != null){
                TotalUpQty = ThisData.ProductAdjustment.Where(x => x.QtyAdjusted > 0).Sum(x => x.QtyAdjusted);
                TotalDownQty = ThisData.ProductAdjustment.Where(x => x.QtyAdjusted < 0).Sum(x => x.QtyAdjusted);
                
                foreach(var yitem in ThisData.ProductAdjustment){
                    if(yitem.QtyAdjusted > 0){
                        FullUpCost += (double)((yitem.QtyAdjusted) * yitem.Cost);
                    }
                    else if(yitem.QtyAdjusted < 0){
                        FullDownCost += (double)((yitem.QtyAdjusted) * yitem.Cost);
                    }
                }
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    } 
    
    private void Refresh(){
        ThisStockAdjustment = new();
        ThisStockAdjustment.User = new();
        ThisStockAdjustment.ProductAdjustment = new();
    }
    
}
