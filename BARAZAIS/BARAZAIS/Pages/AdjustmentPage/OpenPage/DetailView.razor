@page "/Adjustments/Opens/Details"
@page "/Adjustments/Opens/Details/{Sn:int}"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

@{
    if (ThisOpen.Id < 1)
    {
        <div class="row">
            <div class="text-unique txtshadow fs-4">
                --:--
            </div>
        </div>
    }
    else
    {
        FullCost = 0.0;
        GetFullOpenCost(ThisOpen);
        <div class="row mt-2 bg-white shadow-sm rounded">
            <div class="col-12">
                <Header Title=@Title
                LineText=@LineText
                NewUrl=@NewUrl
                ViewUrl=@ViewUrl
                ViewUrlIcon=@ViewUrlIcon />
            </div>
            <div class="col-12">
                <hr class="text-muted"/>
            </div>
            <div class="col-lg-6 col-12">
                <ul class="d-flex flex-column p-0 pb-3 m-0">
                    <li>
                        <h3 class="txtshadow fw-bold fs-4">Code : @(ThisOpen.Code + ThisOpen.Id)</h3>
                    </li>
                    <li class="me-2">
                        <ul class="d-flex flex-column justify-content-start p-0">
                            <li>Date Of Issue </li>
                            <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"> @ThisOpen.DateCreated.ToString("ddd, dd MMM yyyy") </li>
                        </ul>
                    </li>
                </ul>
            </div>
            <div class="col-lg-6 col-md-12">
                <Pagination FirstPage=@FirstPage
                    LastPage=@LastPage
                    NextPage=@NextPage
                    PreviousPage=@PreviousPage
                    CurrentPage=@CurrentPage
                    TotalPages=@TotalPages />
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="row text-start mt-3">
                    <div class="mb-3 col-md-6 col-12 py-0">
                        <div class="row text-start bg-white rounded shadow-sm">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                               Items Cost Info
                            </div>
                            <div class="col-12 p-3 ">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-success">
                                        <span class="text-dark me-1">Items [Pcs] : </span> @(ThisOpen.ProductOpen.Count) [ @(ThisOpen.ProductOpen.Sum(x => x.Qty))]
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        <span class="text-muted me-1">Total Cost : </span>@FullCost.ToString("n0")
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3 col-md-6 col-12 py-0 ps-md-4">
                        <div class="row text-start bg-white rounded shadow-sm">
                            <div class="col-12 p-3  bg-xs shadow-sm rounded-top ">
                                Responsible
                            </div>
                            <div class="col-12 p-3">
                                <ul class="p-0 m-0 text-start">
                                    <li class="p-0 m-0 text-capitalize">
                                        @ThisOpen.User.FirstName @ThisOpen.User.LastName
                                    </li>
                                    <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                        Code : @(ThisOpen.User.Code + ThisOpen.User.Id)
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row text-start mb-3 bg-white rounded shadow-sm">
                    <div class="col-12 py-2 pt-3">
                        Description [Note]
                    </div>
                    <div class="col-12 py-2 text-capitalize">
                        <p class="p-0 py-2 m-0 text-muted border-top" style="font-size:0.8rem !important">
                             @(ThisOpen.Description.Any() ? ThisOpen.Description : "--:--")
                        </p>
                    </div>
                </div>
                <div class="row bg-white rounded shadow-sm mb-3">
                    <div class="col-12 text-white  shadow-sm txtshadow bg-xs rounded-top">
                        <div class="row ">
                            <div class="col-1 text-center py-3 fw-bolder">#</div>
                            <div class="col-4 py-3 text-stat">Product</div>
                            <div class="col-3 py-3 text-center ">Qty Opened</div>
                            <div class="col-2 p-3 text-start">Cost Info</div>
                            <div class="col-2 py-3 text-start">Retail Info</div>
                        </div>
                    </div>
                    <div class="col-12 px-3">
                        @* Start Dynamic Products*@
                            @{
                                if(this.ThisOpen.ProductOpen != null && this.ThisOpen.ProductOpen.Count > 0){
                                        <InProductOpen OpenToCheck=@ThisOpen/>
                                    }
                                else{
                                    <p class="fs-6 text-center text-unique py-3 px-5  bg-xss my-3 " style="width:fit-content; margin:1px auto;">--:--</p>
                                    ThisOpen.ProductOpen = new();
                                }
                            }
                        @* End Dynamic ProductOpens*@
                    </div>
                </div>
            </div>
        </div>

        @*End header*@
    }
}



@code {
    // Url product Id
    [Parameter]
    public int Sn { get; set; } = 0;

    //Header Component
    private string Title = "Open Stock Adjustments";
    private string LineText = "Detail view";
    private string NewUrl = "Adjustments/Opens/New";
    private string ViewUrl = "Adjustments/Opens/ListView";
    private string ViewUrlIcon = "bi-view-stacked";

    //  Pagination 
    private int TotalPages = 1;
    private int CurrentPage = 1;
    private int PageSize = 1 ;
    
    // Data Variables
    private OpenModel ThisOpen = new();
    private double FullCost = 0.0;
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        ThisOpen.ProductOpen = new();
        await Start(Sn);
    }
    
    private async Task Start(int cid = 0){
        ThisOpen.ProductOpen = new();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Opens.GetNoRecords();
            
            if(cid < 1 && TotalPages > 0){
                ThisOpen = (await repo.Opens.GetAllOpensDetailedAsync(1,1)).SingleOrDefault();
                CurrentPage = (repo.Opens.GetIndexOf(ThisOpen) + 1 );
                
            }
            else if(cid > 0 && cid <= TotalPages){
                ThisOpen = await repo.Opens.GetDetailedOpenAsync(cid);
                CurrentPage = (repo.Opens.GetIndexOf(ThisOpen) + 1 );
            }
            else{
                ThisOpen = new();
                ThisOpen.ProductOpen = new();
            }
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
        
        StateHasChanged();
    }
    
    private async Task NextPage(){
        ThisOpen.ProductOpen = new();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Opens.GetNoRecords();
            
            if(CurrentPage < TotalPages ){
                CurrentPage ++ ;
            }
            else{
                CurrentPage = TotalPages; 
            }
            
            ThisOpen = (await repo.Opens.GetAllOpensDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task PreviousPage(){
        ThisOpen.ProductOpen = new();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Opens.GetNoRecords();
            
            if(CurrentPage > 1 ){
                CurrentPage -- ;
            }
            else{
                CurrentPage = 1; 
            }
            
            ThisOpen = (await repo.Opens.GetAllOpensDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task FirstPage(){
        ThisOpen.ProductOpen = new();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Opens.GetNoRecords();
            
            CurrentPage = 1; 
            
            ThisOpen = (await repo.Opens.GetAllOpensDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private async Task LastPage(){
        ThisOpen.ProductOpen = new();
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            TotalPages = repo.Opens.GetNoRecords();
            
            CurrentPage = TotalPages; 
            
            ThisOpen = (await repo.Opens.GetAllOpensDetailedAsync(CurrentPage, PageSize)).SingleOrDefault();
            
            await repo.CompleteAsync();
            repo.Dispose(); 
        }
    }
    
    private void GetFullOpenCost(OpenModel ThisData){
        
        if(ThisData != null){
            foreach(var xitem in ThisData.ProductOpen){
                FullCost += (double)((xitem.Qty) * (xitem.Cost));
            }
        }
    }   
}
