@page "/Adjustments/Prices/New"

@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation
@inject IHttpContextAccessor Accessor
@inject UserManager<UserModel> UserManager
@attribute [Authorize]

<Header
    Title=@Title
    LineText=@LineText
    ViewUrl=@ViewUrl
    ViewUrlIcon=@ViewUrlIcon
    />
    
    <EditForm Model="Fx" OnSubmit="ProcessAndSave" autocomplete="off">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-12">
            <div class="row my-3">
                <div class="col-lg-7 col-4  text-start ps-0">
                    <div class="form-floating mt-2">
                        <InputTextArea required @bind-Value="Fx.Description" class="form-control border-0 bg-xss fw-bolder text-unique text-capitalize rounded-0" placeholder="Description" id="floatingTextarea2" ></InputTextArea>
                        <label for="floatingTextarea2">Description[Note]</label>
                        <ValidationMessage For="() => Fx.Description"/>
                    </div>
                </div>
                <div class="col-lg-5 col-8 d-flex flex-row justify-content-end text-end pe-0">
                    <ul class="p-0 m-0 d-flex flex-row justify-content-between">
                        <li class="p-0 m-0">
                            <button class="btn btn-md text-muted me-4 border rounded-0" @onclick=@(()=> CancelEntry())> <i class="bi bi-file-earmark-excel fs-6 txtshadow me-2"></i>Cancel</button>
                        </li>
                        <li class="py-2">
                            <i class="bi bi-dot fs-6 txtshadow "></i>
                        </li>
                        <li class="p-0 m-0">
                            <button class="btn btn-md px-3 btn-primary shadow-sm  border rounded-0 ms-4"><i class="bi bi-file-earmark-check fs-6 txtshadow me-2 text-white "></i> Create Grn</button>
                        </li>
                    </ul>
                </div>
            </div>
            <div class="row rounded-0 bg-xs text-white txtshadow">
                <div class="col-1 py-3">#</div>
                <div class="col-md-3 col-5 py-3 text-start">
                    Product
                </div>
                <div class="col-2  py-3">Old Price</div>
                <div class="col-2  py-3">New Price</div>
                <div class="col-md-3 d-md-block d-none py-3 text-start">
                    At Cost
                </div>
                <div class="col-md-1 col-2 d-md-block d-none py-3 px-0">Act</div>
            </div>

            @{
                if(FxList.Any()){
                    foreach(var item in FxList){
                        <div class="row border-bottom rounded-0 bg-xss">
                            <div class="col-1 py-2">@(FxList.IndexOf(item) + 1)</div>
                            <div class="col-md-3 col-5 py-1">
                                <a href="Products/Details/@item.ProductId">
                                    <ul class="d-flex flex-column m-0 p-0">
                                        <li class="fw-bolder text-primary text-start txtshadow text-capitalize">@(item.ProductCaption.Length > 16 ? item.ProductCaption.Substring(0,10)+" .." : item.ProductCaption)</li>
                                        <li class="rounded-3 opacity-75 fw-bolder" style="font-size:0.7rem !important; width:fit-content;">@(item.ProductCode + (int)item.ProductId)</li>
                                    </ul>
                                </a>
                            </div>
                            <div class="col-2 py-2">@item.OldPrice.Value.ToString("n0")</div>
                            <div class="col-2 py-2 text-primary opacity-75">@item.LatestPrice.Value.ToString("n0")</div>
                            <div class="col-md-2 d-none d-md-block py-2 text-center">
                                @item.Cost.Value.ToString("n0")
                            </div>
                            <div class="col-md-2 col-2 py-2 text-center"><li @onclick=@(()=> RemoveFromFxList(item)) class=" btn btn-close"></li></div>
                        </div>
                    }
                }
            }

            <div class="row mt-2 rounded-0 border border-2 bg-xss">
                <div class="col-md-2 col-12 py-md-1 py-2 ps-md-0">
                    <input @bind=@Fx.ProductId  @onfocusout=@(()=> FindThisProduct(Fx.ProductId)) type="text" class="py-md-2 bg-white border-0 py-3 text-start rounded-0 text-unique form-control" placeholder="Scan item or id" style="font-size:0.9rem;" />
                </div>
                <div class="col-md-2 col-6 py-2 text-capitalize text-unique">
                    @(Fx.ProductCaption.Length > 16 ? Fx.ProductCaption.Substring(0,10)+" .." : Fx.ProductCaption)
                </div>
                <div class="col-md-2 col-6 py-2">
                    @(Fx.OldPrice != null ? Fx.OldPrice.Value.ToString("n0") : null)
                </div>
                <div class="col-md-2 col-12 py-md-1 py-2 ">
                    <input @bind=@Fx.LatestPrice type="number" min="0" class="py-md-2 py-3 border-0 bg-light text-start rounded-0 text-unique form-control" placeholder="New Price" style="font-size:0.9rem;" />
                </div>
                <div class="col-md-2 col-12 text-start py-2 text-center">
                    @(Fx.Cost != null ? Fx.Cost.Value.ToString("n0") : null )
                </div>
                <div class="col-md-2 col-12 py-1 pb-3 pb-md-1 pe-0 text-md-end text-center"><li @onclick=@(()=> AddToFxList(Fx)) class=" btn btn-success text-center rounded-0"><i class="bi bi-plus-circle text-white "></i> Add</li></div>
            </div>
        </div>
    </div>
</EditForm>
    
@code {

    //Header Component
    private string Title = "Price Adjustments";
    private string LineText = "Add New";
    private string ViewUrl = "Adjustments/Prices/ListView";
    private string ViewUrlIcon = "bi-view-stacked";
    
     //Data
    private PricePoccoModel Fx = new();
    private List<PricePoccoModel> FxList = new();
    private ProductModel ThisProduct = new();
    private PriceModel Pr = new();
    private ProductPrice Pp = new();
    private int LinkedId = 0;
    
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        Fx = new();
        FxList = new();
        ThisProduct = new();
        ThisProduct.ProductPrice = new();
        Pp = new();
        Pr = new();
    }
    
    private async Task FindThisProduct(int? sn){
        if(sn != null && (int)sn > 0){
            using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
                ThisProduct = await repo.Products.GetDetailedProductAsync((int)sn);
                if(ThisProduct != null){
                    
                    Fx.ProductId = ThisProduct.Id;
                    Fx.ProductCode = ThisProduct.Code;
                    Fx.ProductCaption = ThisProduct.Caption;
                    Fx.OldPrice = ThisProduct.ProductPrice.Any() ? ThisProduct.ProductPrice.LastOrDefault().LatestPrice : null;
                    
                    Fx.OldStock = (int)((ThisProduct.ProductGrn.Any() ? ThisProduct.ProductGrn.Sum(a => a.QtyPurchased) : 0) + 
                                       (ThisProduct.ProductOpen.Any() ? ThisProduct.ProductOpen.Sum(a => a.Qty) : 0) + 
                                       (ThisProduct.ProductAdjustment.Any() ? ThisProduct.ProductAdjustment.Sum(a => a.QtyAdjusted) : 0) -
                                       (ThisProduct.ProductBill.Any() ? ThisProduct.ProductBill.Sum(a => a.Qty) : 0));
                    
                    if(ThisProduct.ProductGrn.Any()){
                        Fx.Cost = ThisProduct.ProductGrn.Average(a => a.Cost);
                    }else if(ThisProduct.ProductOpen.Any()){
                        Fx.Cost = ThisProduct.ProductOpen.Average(a => a.Cost);
                    }else{
                        Fx.Cost = null;
                    }
                    
                }
                else{
                    Fx.ProductCaption = "No Item Found";
                }
                
                await repo.CompleteAsync();
                repo.Dispose();
            }
        }
        else{
            Fx.ProductCaption = "No Item Found";
        }
    }
    
    private void AddToFxList(PricePoccoModel ThisData){
        if(Fx != null && 
            Fx.ProductId != null && (int)Fx.ProductId > 0 && 
            Fx.LatestPrice != null && (double)Fx.LatestPrice > 0 && 
            Fx.Description != ""){
                
            FxList.Add(Fx);
            Fx = new();
            
            Fx.Description = FxList.LastOrDefault().Description;
        }
    }
    
    private void RemoveFromFxList(PricePoccoModel ThisData){
        if(ThisData != null){
            FxList.Remove(ThisData);
        }
    }
    
    private async Task ProcessAndSave(){
        ThisProduct = new();
        Pp = new();
        
        Pr.Code = "PAD";
        Pr.Description = FxList.LastOrDefault().Description;
        var Tempuser = await UserManager.FindByNameAsync(Accessor.HttpContext.User.Identity?.Name);

        this.Pr.UserId = Tempuser.Id;
        this.Pr.CompanyId = Tempuser.CompanyId;
        
        using(var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext())){
            
            foreach(var xx in FxList){
                ThisProduct = await repo.Products.GetDetailedProductAsync((int)xx.ProductId);
                Pp.Product = ThisProduct;
                Pp.Price = Pr;
                Pp.OldPrice = (decimal)xx.OldPrice;
                Pp.LatestPrice = (decimal)xx.LatestPrice;
                Pp.Cost = (decimal)xx.Cost;
                Pp.OldStock = xx.OldStock;
                
                await repo.ProductPrices.AddAsync(Pp);
                await repo.CompleteAsync(); 
            }
            
            await repo.CompleteAsync();  
            LinkedId = (int)Pp.PriceId;
            repo.Dispose();
        }
        
        ThisProduct = new();
        Fx = new();
        FxList = new();
        
        Navigation.NavigateTo("Adjustments/Prices/Details/" + LinkedId );  
        StateHasChanged();
    }
    
    private void CancelEntry()
    {
        Navigation.NavigateTo("Adjustments/Prices/ListView");
    }
}