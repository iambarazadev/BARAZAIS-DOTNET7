@attribute [Authorize]
@{
    if(!TheseProducts.Any()){

        <div class="container text-center">
            <p class="p-3  fs-4 text-unique fw-lighter">--:--</p>
        </div>
    }
    else{
        <div class="row py-2 text-unique bg-xss rounded border-bottom">
            <div class="col-1 py-2 text-center">#</div>
            <div class=" col-4 py-2 text-start text-unique">
                ID | <i class=" bi-upc-scan "></i>
            </div>
            <div class=" col-7 py-2 text-start text-unique">
                Product | Brand
            </div>
        </div>
        
            foreach(var item in TheseProducts){
                
                <div class="row bg-xss text-unique border-bottom">
                    <div class="col-1 py-1 text-center text-dark">@(CategoryToCheck.Product.IndexOf(item) + 1)</div>
                    <div class=" col-4 py-1 text-start text-unique">
                        <a class="p-0 m-0 text-unique" href="Products/Details/@item.Id" style="font-size:0.8rem !important;">
                            <ul class="d-flex flex-column justify-content-start m-0 p-0">
                                <li class="text-primary">@(item.Code + item.Id)</li>
                                <li class=" opacity-75" style="font-size:0.7rem !important; width:fit-content;">@(item.Barcode.Any() ? item.Barcode.FirstOrDefault().Scan : "--:--")</li>
                            </ul>
                        </a>
                    </div>
                    <div class="col-7 py-1 text-start text-unique">
                        <NavLink class="p-0 m-0 text-unique" href="Products/Detail/1" style="font-size:0.8rem !important;">
                            <ul class="d-flex flex-column justify-content-start m-0 p-0">
                                <li class="text-capitalize">@item.Caption</li>
                                <li class=" opacity-75 text-capitalize" style="font-size:0.7rem !important; width:fit-content;">@item.Brand.Caption</li>
                            </ul>
                        </NavLink>
                    </div>
                    
                </div>
            }
            
        <InnerPagination 
            InnerNextPage=@InnerNextPage
            InnerPreviousPage=@InnerPreviousPage
            InnerCurrentPage=@InnerCurrentPage
            InnerTotalPages=@InnerTotalPages 
            />
    }
}

@code{
    
    //  Inner Pagination 
        private int InnerTotalPages = 1;
        private int InnerCurrentPage = 1;
        private int InnerPageSize = 50 ;
        
    // Parameter
    [Parameter]
    public CategoryModel CategoryToCheck {get;set;}
    private List<ProductModel> TheseProducts = new();
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();
        await InnerNextPage();
    }
    
    
    private async Task InnerNextPage(){
        
        if(CategoryToCheck.Product.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(CategoryToCheck.Product.Count)/InnerPageSize)));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProducts = CategoryToCheck.Product
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        StateHasChanged();
    }
    
    
    private async Task InnerPreviousPage(){
        if(CategoryToCheck.Product.Any()){
            InnerTotalPages = ((int)(Math.Ceiling((double)(CategoryToCheck.Product.Count)/InnerPageSize)));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProducts = CategoryToCheck.Product
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
        }
        StateHasChanged();
    }
}

