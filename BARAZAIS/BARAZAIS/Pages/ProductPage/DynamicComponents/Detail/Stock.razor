@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

@{
    if(ViewAdjustment){         
        <div class="modal fade " style="width:100vw !important;" id="Search" tabindex="-1" aria-labelledby="SearchLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog modal-dialog-scrollable modal-xl rounded-0 ">
                <div class="modal-content border-0 bg-xss rounded-0">
                    <div class="modal-header border-0 px-1 py-0 pb-1 my-0 text-capitalize"> 
                        <ul class=" m-0 p-0 d-flex flex-row">
                            <li class="p-0" style="font-size:1.14rem !important; width:fit-content;"><p class="bg-xs py-1 px-2 fw-bolder"> @(ProductToCheck.Caption)</p></li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;"> <p class="bg-light p-2">Code : @(ProductToCheck.Code + ProductToCheck.Id )</p></li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;"> <p class="bg-light p-2"><i class="bi bi-bookmark-fill  txtshadow me-1"></i> @(ProductToCheck.Brand.Caption)</p></li>
                            <li class=" p-0 opacity-75" style="font-size:0.8rem !important; width:fit-content;"> <p class="bg-light p-2"><i class="bi-columns-gap me-1"></i> @(ProductToCheck.Category.Caption)</p></li>
                        </ul>
                        <ul class=" m-0 p-0 d-flex flex-row">
                            <li class=" p-0 opacity-75 rounded-circle" style="font-size:1rem !important; width:fit-content; cursor:pointer;"> <p class=" text-white rounded-circle"><i class="bi-printer text-white fw-bolder me-1"></i></p></li>
                        </ul>
                    </div>
                    <div class="modal-body py-0">
                        <div class="row">
                            <div class="col-12 shadow-lg bg-light border border-5 rounded-3 p-3">
                                <QuickViewStock GetThisProduct=@ProductToCheck SNum=@SendAdjustmentId/>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>  
    }
}

<div class="row text-start">
    <div class="col-md-5 col-12  pt-2 pb-4 px-0 d-flex flex-row flex-wrap justify-content-start">
        <ul class="p-0 m-0 d-flex flex-row justify-content-start flex-wrap">
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@FromDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="From Date" />
                    <label for="floatingInput" class="text-unique">
                        From Date
                    </label>
                </div>
            </li>
            <li class="p-0 m-0 me-2">
                <div class="form-floating mt-2 rounded-3">
                    <input @bind=@ToDate @bind:event="onchange" type="date" style="font-size:0.8rem !important" class="form-control bg-blue border-0 text-unique fw-bolder rounded " id="floatingInput" placeholder="To Date" />
                    <label for="floatingInput" class="text-unique">
                        To Date
                    </label>
                </div>
            </li>
            <li class="py-2">
                <ul class="p-0 m-0 d-flex flex-md-column flex-row">
                    <li class="p-0 m-0 text-unique" >
                        <button @onclick=@(()=>ChangeDate()) class="btn btn-sm btn-primary text-white rounded border-0"><i class="bi bi-funnel text-white"></i></button>
                    </li>
                    <li class="p-0 m-0 text-unique mt-1 ps-md-0 ps-3" >
                        <button @onclick=@(()=>Reset()) class="btn btn-sm text-white rounded border-0 py-0 px-1 ms-1"><i class="bi bi-arrow-clockwise text-muted" style="font-size:0.75rem !important"></i></button>
                    </li>
                </ul>
            </li>
        </ul>
    </div>
    <div class="col-md-7 col-12 py-3">
        <div class="row" style="font-size:0.7rem !important">
            <div class="col-md-6 col-12 rounded-3 px-0 px-md-2 mb-md-0 mb-2">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique" >
                        TOTAL ADJUSTMENTS [+ve]
                    </li>
                    <li class="p-2 py-0 m-0 text-success" >
                        &sum; @((TotalUpAdjustmentCost).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(UpItems) @(UpItems > 1 ? "items" : "item") <span class="bi bi-dot"></span> <span class="text-success">+@(NumOfUpAdjustment) @(NumOfUpAdjustment > 1 ? "pcs" : "pc")</span>
                    </li>
                </ul>
            </div>
            <div class="col-md-6 col-12 rounded-3 px-0 px-md-2">
                <ul class="p-2 m-0 text-start bg-xss rounded">
                    <li class="p-2 m-0 text-unique" >
                        TOTAL ADJUSTMENTS [-ve]
                    </li>
                    <li class="p-2 py-0 m-0 text-danger" >
                        &sum; @((TotalDownAdjustmentCost).ToString("n0"))
                    </li>
                    <li class="p-2 m-0 text-muted border-top mt-2" style="font-size:0.8rem !important">
                        @(DownItems) @(DownItems > 1 ? "items" : "item")<span class="bi bi-dot"></span> <span class="text-danger"> @(NumOfDownAdjustment) @(NumOfDownAdjustment > 1 ? "pcs" : "pc")</span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="row bg-xss text-unique py-2 border-bottom rounded mt-1" >
    <div class="col-1 py-2 text-center">#</div>
    <div class="col-2 py-1 text-start text-unique">
        <NavLink class="p-0 m-0 text-unique" href="" >
            <ul class="d-flex flex-column justify-content-start m-0 p-0" >
                <li class="">AdjCode</li>
                <li class=" p-0 opacity-75" style="font-size:0.7rem !important; width:fit-content;"> Responsible</li>
            </ul>
        </NavLink>
    </div>
    <div class="col-2 py-1 text-center text-unique" >
       <ul class="d-flex flex-column justify-content-center m-0 p-0" >
            <li class="">Stock</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;"> Before</li>
        </ul>
    </div>
    <div class="col-lg-2 d-none d-lg-block py-1 text-center text-unique" >
       <ul class="d-flex flex-column justify-content-center m-0 p-0" >
            <li class="">Stock</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;"> Variance</li>
        </ul>
    </div>
    <div class=" col-2 py-1 text-center text-unique" >
        <ul class="d-flex flex-column justify-content-center m-0 p-0" >
            <li class="">Stock</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;"> After</li>
        </ul>
    </div>
    <div class="col-lg-1 col-4 py-1 text-start text-unique" >
        <ul class="d-flex flex-column justify-content-start m-0 p-0" >
            <li class="">Date</li>
            <li class=" p-0 opacity-75" style="font-size:0.7rem !important;"> Day & Time</li>
        </ul>
    </div>
    <div class="col-lg-2 d-none d-lg-block py-1 ps-0 text-center text-unique" style="font-size:0.8rem !important;">
        <ul class=" m-0 p-0 text-start">
            <li class="text-start">Responsible</li>
            <li class="opacity-75 text-start" style="font-size:0.7rem !important;">Code</li>
        </ul>
    </div>
</div>
@{
    if(!TheseProductAdjustments.Any()){
        <div class="container text-center">
            <p class="p-3  fs-4 text-unique bg-light fw-lighter">--:--</p>
        </div>
    }
    else{
        foreach(var item in TheseProductAdjustments){
            StockBefore = 0;
            StockVariance = 0;
            StockAfter = 0;
            Colouring = "";
            
            StockBefore = item.OldStock;
            StockVariance = item.QtyAdjusted ;
            StockAfter = item.OldStock + item.QtyAdjusted ;
            Colouring = item.QtyAdjusted > 0 ? "text-success" : "text-danger";
            
            <div class="row bg-xss border-bottom py-0 text-unique" style="font-size:0.8rem !important">
                <div class="col-1 py-1 text-center">
                    @(ProductToCheck.ProductAdjustment.IndexOf(item)+1)
                </div>
                <div class="col-2 py-1 text-start text-unique" style="font-size:0.8rem !important;">
                    <ul type="button" data-bs-toggle="modal" data-bs-target="#Search" onclick=@(()=>ViewAdjustmentAsap(item.Adjustment.Id)) class="d-flex flex-column justify-content-start p-0 m-0 text-unique" style="font-size:0.8rem !important; cursor:pointer;">
                        <li class="text-primary p-0 m-0">@(item.Adjustment.Code + item.Adjustment.Id)</li>
                        <li class=" opacity-75 p-0 m-0" style="font-size:0.7rem !important; width:fit-content;"> @(item.Adjustment.User.FirstName.Length > 9 ? item.Adjustment.User.FirstName.Substring(0,7) + " .." : item.Adjustment.User.FirstName)</li>
                    </ul>
                </div>
                <div class="col-2 py-1 text-center text-unique" style="font-size:0.8rem !important;">
                    @StockBefore
                </div>
                <div class="col-lg-2 d-none d-lg-block py-1 text-center @Colouring" style="font-size:0.8rem !important;">
                    @(StockVariance > 0 ? "+" :"")@StockVariance
                </div>
                <div class="col-2 py-1 text-center text-unique" style="font-size:0.8rem !important;">
                    @StockAfter
                </div>
                <div class="col-lg-1 col-4 py-1 text-start text-unique" style="font-size:0.8rem !important;">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0">
                        <li class="p-0 m-0">@item.Adjustment.DateCreated.ToString("dd MMM yy")</li>
                        <li class=" opacity-75 p-0 m-0" style="font-size:0.7rem !important;">@item.Adjustment.DateCreated.ToString("ddd hh : mm")</li>
                    </ul>
                </div>
                <div class="col-lg-2 d-none d-lg-block py-1 ps-0 text-start text-unique" style="font-size:0.8rem !important;">
                    <ul class="d-flex flex-column justify-content-start m-0 p-0 text-capitalize">
                        <li class=" d-none d-sm-block" style="font-size:0.8rem !important;">@(item.Adjustment.User.Code + item.Adjustment.User.Id)</li>
                        <li class=" opacity-75 d-none d-sm-block" style="font-size:0.7rem !important;"> @(item.Adjustment.User.FirstName + " " + item.Adjustment.User.LastName)</li>
                    </ul>
                </div>
            </div>
        }
        <InnerPagination 
            InnerNextPage=@InnerNextPage
            InnerPreviousPage=@InnerPreviousPage
            InnerCurrentPage=@InnerCurrentPage
            InnerTotalPages=@InnerTotalPages 
            />
    }
}


@code{
    
    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 1;
    private int InnerPageSize = 10 ;
    
    [Parameter]
    public ProductModel ProductToCheck {get;set;}
    private List<ProductAdjustment> TheseProductAdjustments = new();
    
    private int StockBefore = 0;
    private int StockVariance = 0;
    private int StockAfter = 0;
    private int AdjustmentQtyBeforeDate = 0;
    private string Colouring = "";
    
    private DateOnly FromDate;
    private DateOnly ToDate;
    
    //filtering
    private int NumOfUpAdjustment = 0;
    private int NumOfDownAdjustment = 0;
    private decimal TotalDownAdjustmentCost = 0;
    private decimal TotalUpAdjustmentCost = 0;
    private int UpItems = 0;
    private int DownItems = 0;
    
     //forpopping modal
    private bool ViewAdjustment = false;
    private int SendAdjustmentId = 0;
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();  
        FromDate = DateOnly.FromDateTime(ProductToCheck.DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);
        
        Reset();
        StateHasChanged();
    }
    
    private async Task InnerNextPage(){
        TheseProductAdjustments = new();
        if(ProductToCheck.ProductAdjustment.Any()){
            InnerTotalPages = (int)(Math.Ceiling((double)(ProductToCheck.ProductAdjustment
            .Where(x => (((DateOnly.FromDateTime(x.Adjustment.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.Adjustment.DateCreated)) <= ToDate))).ToList().Count())/InnerPageSize));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProductAdjustments = ProductToCheck.ProductAdjustment
            .Where(x => (((DateOnly.FromDateTime(x.Adjustment.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.Adjustment.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Adjustment.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
            
            StockInfo();
        }
        StateHasChanged();
    }
    
    private async Task InnerPreviousPage(){
        TheseProductAdjustments = new();
        if(ProductToCheck.ProductAdjustment.Any()){          
            InnerTotalPages = (int)(Math.Ceiling((double)(ProductToCheck.ProductAdjustment
            .Where(x => (((DateOnly.FromDateTime(x.Adjustment.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.Adjustment.DateCreated)) <= ToDate))).ToList().Count())/InnerPageSize));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProductAdjustments = ProductToCheck.ProductAdjustment
            .Where(x => (((DateOnly.FromDateTime(x.Adjustment.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.Adjustment.DateCreated)) <= ToDate)))
            .OrderBy(x => x.Adjustment.Id)
            .Reverse()
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
            
            StockInfo();
        }
        StateHasChanged();
    }
    
    private void ChangeDate(){
        InnerCurrentPage = 0;
        InnerNextPage();
    }
    
    private void StockInfo(){
        UpItems = 0;
        DownItems = 0;
        
        NumOfDownAdjustment = 0;
        NumOfUpAdjustment = 0;
        
        TotalDownAdjustmentCost = 0;
        TotalUpAdjustmentCost = 0;
        
        foreach(var prodadj in ProductToCheck.ProductAdjustment.Where(x => (((DateOnly.FromDateTime(x.Adjustment.DateCreated)) >= FromDate) && ((DateOnly.FromDateTime(x.Adjustment.DateCreated)) <= ToDate)))){
            if(prodadj.QtyAdjusted > 0){
                NumOfUpAdjustment += prodadj.QtyAdjusted;
                TotalUpAdjustmentCost += ((prodadj.Cost) * (prodadj.QtyAdjusted));
                UpItems += 1;
            }
            else{
                NumOfDownAdjustment += prodadj.QtyAdjusted;
                TotalDownAdjustmentCost += ((prodadj.Cost) * (prodadj.QtyAdjusted));
                DownItems += 1;
            }
        }
    }
    
    private async Task Reset(){
        FromDate = DateOnly.FromDateTime(ProductToCheck.DateCreated);
        ToDate = DateOnly.FromDateTime(DateTime.Now);

        InnerCurrentPage = 0;
        await InnerNextPage();
    }
    
    private void ViewAdjustmentAsap(int G){
        ViewAdjustment = true;
        SendAdjustmentId = G;
        StateHasChanged();
    }
}