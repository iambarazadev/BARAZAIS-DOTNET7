@inject IDbContextFactory<BarazaContext> MyFactory
@inject NavigationManager Navigation

@{
    if(!TheseProductGrns.Any()){
        <div class="container text-center">
            <p class="p-3  fs-4 text-unique bg-light fw-lighter"> --:--</p>
        </div>
    }
    else{
            foreach(var item in TheseProductGrns){
                <div class="row ">
                    <div class="col-lg-6 col-12 p-0">
                        <ul class="d-flex flex-column p-0 m-0">
                            <li>
                                <h3 class="txtshadow text-capitalize fw-bold fs-4">Code : @(ThisGrn.Code + ThisGrn.Id)</h3>
                            </li>
                            <li class="me-2">
                                <ul class="d-flex flex-column justify-content-start p-0">
                                    <li>Date Of Issue </li>
                                    <li class=" m-0 opacity-75 " style="font-size:0.8rem !important; width:fit-content;"> @ThisGrn.DateCreated.ToString("ddd, dd MMM yyyy") </li>
                                </ul>
                            </li>
                        </ul>
                    </div>
                    <div class="col-lg-6 col-md-12">
                        <InnerPagination 
                            InnerNextPage=@InnerNextPage
                            InnerPreviousPage=@InnerPreviousPage
                            InnerCurrentPage=@InnerCurrentPage
                            InnerTotalPages=@InnerTotalPages 
                        />
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="row text-start mt-3">
                            <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0">
                                <div class="row text-start bg-xss">
                                    <div class="col-12 p-3  bg-xs shadow-sm ">
                                        Receipt Info
                                    </div>
                                    <div class="col-12 p-3">
                                        <ul class="p-0 m-0 text-start">
                                            <li class="p-0 m-0">
                                                Receipt Numb : @ThisGrn.ReceiptCode
                                            </li>
                                            <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                                Rceceipt Date : @ThisGrn.ReceiptDate.ToString("ddd, dd MMM yyyy")
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-md-4">
                                <div class="row text-start bg-xss ">
                                    <div class="col-12 p-3  bg-xs shadow-sm ">
                                        Cost Info
                                    </div>
                                    <div class="col-12 p-3">
                                        <ul class="p-0 m-0 text-start">
                                            <li class="p-0 m-0">
                                            Items : @(ThisGrn.ProductGrn.Count) , Pcs : @(ThisGrn.ProductGrn.Sum(x => x.QtyPurchased))
                                            </li>
                                            <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                                &sum; @((FullCost).ToString("n0"))
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-md-4">
                                <div class="row text-start bg-xss ">
                                    <div class="col-12 p-3 bg-xs shadow-sm ">
                                        Supplier Info
                                    </div>
                                    <div class="col-12 p-3">
                                        <ul class="p-0 m-0 text-start">
                                            <li class="p-0 m-0 text-capitalize">
                                                @ThisGrn.Supplier.Caption
                                            </li>
                                            <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                                Code : @((ThisGrn.Supplier.Code + ThisGrn.Supplier.Id))
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xxl-3 mb-3 col-lg-3 col-md-6 col-12 py-0 ps-md-4">
                                <div class="row text-start bg-xss ">
                                    <div class="col-12 p-3  bg-xs shadow-sm ">
                                        Responsible
                                    </div>
                                    <div class="col-12 p-3">
                                        <ul class="p-0 m-0 text-start">
                                            <li class="p-0 m-0 text-capitalize">
                                                @ThisGrn.User.FirstName @ThisGrn.User.LastName
                                            </li>
                                            <li class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                                Code : @(ThisGrn.User.Code + ThisGrn.User.Id)
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row text-start mb-3 border border-1">
                            <div class="col-12 bg-xss py-3">
                                Description [Note]
                            </div>
                            <div class="col-12 py-2 text-capitalize">
                                <p class="p-0 m-0 text-muted" style="font-size:0.8rem !important">
                                    @(ThisGrn.Description.Any() ? ThisGrn.Description : "--:--")
                                </p>
                            </div>
                        </div>
                        <div class="row " style="">
                            <div class="col-12">
                                <div class="row text-white  shadow-sm txtshadow bg-xs">
                                    <div class="col-1 text-center py-3 fw-bolder">#</div>
                                    <div class="col-lg-4 col-4 py-3 text-start">Product</div>
                                    <div class="col-1 d-none d-lg-block py-3 text-center ">Before</div>
                                    <div class="col-lg-1 col-3 py-3 text-center ">Purchased</div>
                                    <div class="col-1 d-none d-lg-block py-3 text-center">After</div>
                                    <div class="col-lg-2 col-4 py-3 text-start">Purc.Cost</div>
                                    <div class="col-2 d-none d-lg-block py-3 text-md-start text-center ">Retail Price</div>
                                </div>
                                @* Start Dynamic Products*@
                                    @{
                                        if(this.ThisGrn.ProductGrn.Any() && this.ThisGrn.ProductGrn.Count > 0){
                                                <InProductGrn GrnToCheck=@ThisGrn MoreId=@(GetThisProduct.Id)/>
                                            }
                                        else{
                                            <p class="fs-6 text-center text-unique py-3 px-5  bg-xss my-3" style="width:fit-content; margin:1px auto;">--:--</p>
                                            ThisGrn.ProductGrn = new();
                                        }
                                    }
                                @* End Dynamic ProductGrns*@
                            </div>
                        </div>
                    </div>
                </div>

            @*End header*@
        }
    }
}


@code{
    [Parameter]
    public ProductModel GetThisProduct {get;set;}
    
    [Parameter]
    public int Gnum {get;set;}
    
    //Data variables
    private GrnModel ThisGrn = new();
    private List<ProductGrn> TheseProductGrns = new();
    
    private double FullCost = 0.0;
    
    //  Inner Pagination 
    private int InnerTotalPages = 1;
    private int InnerCurrentPage = 0;
    private int InnerPageSize = 1 ;
    
    protected override async Task OnInitializedAsync(){
        await base.OnInitializedAsync();  
        
        Refresh();
        await Start((int)Gnum);
        StateHasChanged();
    }
    
    private async Task Start(int Num){
        if(Num > 0){
            InnerTotalPages = (int)(Math.Ceiling((double)(GetThisProduct.ProductGrn.Count())/InnerPageSize));
        
            TheseProductGrns = GetThisProduct.ProductGrn
                .Where(x => x.GrnId == (int)Num)
                .OrderBy(x => x.Grn.Id)
                .Skip((InnerCurrentPage - 1) * InnerPageSize)
                .Take(InnerPageSize)
                .ToList();
            
            var GrnItem = GetThisProduct.ProductGrn
                .OrderBy(x => x.Grn.Id)
                .ToList();

                await FetchGrnData(TheseProductGrns.SingleOrDefault().GrnId);
            
            InnerCurrentPage = GrnItem.IndexOf(TheseProductGrns.SingleOrDefault())+1;
             StateHasChanged();
        }
        else{
            InnerCurrentPage = 0;
            await InnerNextPage();
            StateHasChanged();
        }
        StateHasChanged();
    }
    
    private async Task InnerNextPage(){
        Refresh();
        if(GetThisProduct.ProductGrn.Any()){
            InnerTotalPages = (int)(Math.Ceiling((double)(GetThisProduct.ProductGrn.Count())/InnerPageSize));
            
            if(InnerCurrentPage < InnerTotalPages ){
                InnerCurrentPage ++ ;
            }
            else{
                InnerCurrentPage = InnerTotalPages; 
            }
            
            TheseProductGrns = GetThisProduct.ProductGrn
            .OrderBy(x => x.Grn.Id)
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
            await FetchGrnData(TheseProductGrns.SingleOrDefault().GrnId);
        }
        StateHasChanged();
    }
    
    private async Task InnerPreviousPage(){
        Refresh();
        if(GetThisProduct.ProductGrn.Any()){
            InnerTotalPages = (int)(Math.Ceiling((double)(GetThisProduct.ProductGrn.Count())/InnerPageSize));
            
            if(InnerCurrentPage > 1 ){
                InnerCurrentPage -- ;
            }
            else{
                InnerCurrentPage = 1; 
            }
            
            TheseProductGrns = GetThisProduct.ProductGrn
            .OrderBy(x => x.Grn.Id)
            .Skip((InnerCurrentPage - 1) * InnerPageSize)
            .Take(InnerPageSize)
            .ToList();
            await FetchGrnData(TheseProductGrns.SingleOrDefault().GrnId);
        }
        StateHasChanged();
    }
    
    private async Task FetchGrnData(int? Gnumber){
        Refresh();
        FullCost = 0.0;
        using (var repo = new UnitOfWorkRepo(MyFactory.CreateDbContext()))
        {
            if(Gnumber > 0){
                ThisGrn = await repo.Grns.GetDetailedGrnAsync((int)Gnumber);
            }
            
            if (ThisGrn != null)
            {
                foreach (var xitem in ThisGrn.ProductGrn)
                {
                    FullCost += (double)((xitem.QtyPurchased) * (xitem.Cost));
                }
            }

            await repo.CompleteAsync();
            repo.Dispose();
        }
    }
    
    private void Refresh(){
        ThisGrn = new();
        ThisGrn.ProductGrn = new();
        ThisGrn.Supplier = new();
        ThisGrn.User = new();
         StateHasChanged();
    }
}